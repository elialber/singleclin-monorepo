<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SingleClin.API</name>
    </assembly>
    <members>
        <member name="T:SingleClin.API.Attributes.AuthorizeClinicOwnerAttribute">
            <summary>
            Authorization attribute that ensures the user owns or belongs to the clinic being accessed
            </summary>
        </member>
        <member name="M:SingleClin.API.Attributes.AuthorizeClinicOwnerAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the AuthorizeClinicOwnerAttribute
            </summary>
            <param name="clinicIdParameterName">The name of the route/query parameter containing the clinic ID</param>
            <param name="allowAdmin">Whether to allow administrators to bypass the check</param>
        </member>
        <member name="T:SingleClin.API.Attributes.AuthorizeAdminOrClinicOwnerAttribute">
            <summary>
            Authorization attribute that allows either admin or clinic owner
            </summary>
        </member>
        <member name="T:SingleClin.API.Attributes.AuthorizeRoleAttribute">
            <summary>
            Custom authorization attribute for role-based access control
            </summary>
        </member>
        <member name="M:SingleClin.API.Attributes.AuthorizeRoleAttribute.#ctor(SingleClin.API.Data.Enums.UserRole[])">
            <summary>
            Initializes a new instance of the AuthorizeRoleAttribute
            </summary>
            <param name="roles">Allowed roles</param>
        </member>
        <member name="T:SingleClin.API.Attributes.AuthorizeAdminAttribute">
            <summary>
            Authorize attribute for Administrator role
            </summary>
        </member>
        <member name="T:SingleClin.API.Attributes.AuthorizeClinicAttribute">
            <summary>
            Authorize attribute for Clinic roles (Origin and Partner)
            </summary>
        </member>
        <member name="T:SingleClin.API.Attributes.AuthorizePatientAttribute">
            <summary>
            Authorize attribute for Patient role
            </summary>
        </member>
        <member name="T:SingleClin.API.Attributes.AuthorizeAnyRoleAttribute">
            <summary>
            Authorize attribute for any authenticated user
            </summary>
        </member>
        <member name="T:SingleClin.API.Controllers.AuthController">
            <summary>
            Controller for authentication endpoints
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.Register(SingleClin.API.DTOs.Auth.RegisterDto)">
            <summary>
            Register a new user
            </summary>
            <param name="registerDto">Registration information</param>
            <returns>Authentication response with tokens</returns>
            <response code="200">Registration successful</response>
            <response code="400">Invalid registration data or email already exists</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.Login(SingleClin.API.DTOs.Auth.LoginDto)">
            <summary>
            Login with email and password
            </summary>
            <param name="loginDto">Login credentials</param>
            <returns>Authentication response with tokens</returns>
            <response code="200">Login successful</response>
            <response code="401">Invalid credentials</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.RefreshToken(SingleClin.API.DTOs.Auth.RefreshTokenDto)">
            <summary>
            Refresh access token using refresh token
            </summary>
            <param name="refreshTokenDto">Refresh token information</param>
            <returns>New authentication response with tokens</returns>
            <response code="200">Token refreshed successfully</response>
            <response code="401">Invalid or expired refresh token</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.Logout">
            <summary>
            Logout current user
            </summary>
            <returns>Success status</returns>
            <response code="200">Logout successful</response>
            <response code="401">Not authenticated</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.GetCurrentUser">
            <summary>
            Get current user information
            </summary>
            <returns>Current user details</returns>
            <response code="200">User information retrieved</response>
            <response code="401">Not authenticated</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.GetUserClaims">
            <summary>
            Get user claims for authenticated user
            </summary>
            <returns>User claims and permissions</returns>
            <response code="200">User claims retrieved successfully</response>
            <response code="401">Not authenticated</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.SocialLogin(SingleClin.API.DTOs.Auth.SocialLoginDto)">
            <summary>
            Login with social provider (Google or Apple)
            </summary>
            <param name="socialLoginDto">Social login information</param>
            <returns>Authentication response with tokens</returns>
            <response code="200">Social login successful</response>
            <response code="400">Invalid social login data</response>
            <response code="503">Social login not available</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.RevokeAllTokens">
            <summary>
            Revoke all refresh tokens for current user (logout from all devices)
            </summary>
            <returns>Number of tokens revoked</returns>
            <response code="200">Tokens revoked successfully</response>
            <response code="401">Not authenticated</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthTestController.GetPublic">
            <summary>
            Public endpoint - no authentication required
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthTestController.GetProtected">
            <summary>
            Protected endpoint - requires authentication
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthTestController.GetAdminOnly">
            <summary>
            Admin only endpoint
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthTestController.GetClinicOnly">
            <summary>
            Clinic only endpoint
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthTestController.GetPatientOnly">
            <summary>
            Patient only endpoint
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.BaseController.CurrentUserId">
            <summary>
            Gets the current authenticated user's ID from the JWT token
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.BaseController.CurrentUserEmail">
            <summary>
            Gets the current authenticated user's email from the JWT token
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.BaseController.CurrentUserRole">
            <summary>
            Gets the current authenticated user's role from the JWT token
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.BaseController.CurrentUserClinicId">
            <summary>
            Gets the current authenticated user's clinic ID from the JWT token (if applicable)
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.IsInRole(System.String)">
            <summary>
            Checks if the current user has a specific role
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.BaseController.IsAdmin">
            <summary>
            Checks if the current user is an admin
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.BaseController.IsClinicUser">
            <summary>
            Checks if the current user is a clinic user (any type)
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.BaseController.IsPatient">
            <summary>
            Checks if the current user is a patient
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.OkResponse``1(``0,System.String)">
            <summary>
            Returns a successful response with data
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.OkResponse(System.String)">
            <summary>
            Returns a successful response without data
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.CreatedResponse``1(``0,System.String,System.String)">
            <summary>
            Returns a created response with data
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.BadRequestResponse(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Returns a bad request response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.ValidationErrorResponse(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Returns a validation error response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.ValidationErrorResponse">
            <summary>
            Returns a validation error response from ModelState
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.UnauthorizedResponse(System.String)">
            <summary>
            Returns an unauthorized response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.ForbiddenResponse(System.String)">
            <summary>
            Returns a forbidden response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.NotFoundResponse(System.String)">
            <summary>
            Returns a not found response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.ConflictResponse(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Returns a conflict response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.InternalServerErrorResponse(System.String)">
            <summary>
            Returns an internal server error response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.CustomResponse``1(System.Int32,``0,System.String)">
            <summary>
            Returns a custom status code response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.CustomErrorResponse(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Returns a custom error response
            </summary>
        </member>
        <member name="T:SingleClin.API.Controllers.HealthController">
            <summary>
            Health check endpoints documentation
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.HealthController.GetHealthCheckInfo">
            <summary>
            Get information about available health check endpoints
            </summary>
            <response code="200">Returns information about health check endpoints</response>
        </member>
        <member name="M:SingleClin.API.Controllers.HealthController.TestCors">
            <summary>
            Test CORS configuration
            </summary>
            <response code="200">Returns CORS test response with headers information</response>
        </member>
        <member name="T:SingleClin.API.Controllers.PlanController">
            <summary>
            Controller for managing subscription plans (Admin Only)
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.PlanController.GetAll(SingleClin.API.DTOs.Plan.PlanFilterDto)">
            <summary>
            Get all plans with pagination and filtering
            </summary>
            <param name="filter">Filter criteria including pagination, search, price range, credits range, featured status, and sorting</param>
            <returns>Paginated list of plans</returns>
            <response code="200">Returns the paginated list of plans</response>
            <response code="400">Invalid filter parameters</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <example>
            GET /api/plan?pageNumber=1&amp;pageSize=10&amp;isActive=true&amp;searchTerm=premium&amp;minPrice=50&amp;maxPrice=200&amp;isFeatured=true&amp;sortBy=price&amp;sortDirection=desc
            </example>
        </member>
        <member name="M:SingleClin.API.Controllers.PlanController.GetActive">
            <summary>
            Get active plans (no admin authorization required)
            </summary>
            <returns>List of active plans</returns>
            <response code="200">Returns list of active plans</response>
        </member>
        <member name="M:SingleClin.API.Controllers.PlanController.GetById(System.Guid)">
            <summary>
            Get plan by ID
            </summary>
            <param name="id">Plan ID</param>
            <returns>Plan details</returns>
            <response code="200">Returns the plan</response>
            <response code="400">Invalid plan ID format</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Plan not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.PlanController.Create(SingleClin.API.DTOs.Plan.PlanRequestDto)">
            <summary>
            Create a new plan
            </summary>
            <param name="planRequest">Plan creation data with validation rules</param>
            <returns>Created plan</returns>
            <response code="201">Plan created successfully</response>
            <response code="400">Invalid plan data or validation errors</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="409">Plan name already exists</response>
            <example>
            POST /api/plan
            {
              "name": "Premium Plan",
              "description": "Premium subscription with enhanced features",
              "credits": 1000,
              "price": 99.99,
              "originalPrice": 149.99,
              "validityDays": 365,
              "isActive": true,
              "displayOrder": 1,
              "isFeatured": true
            }
            </example>
        </member>
        <member name="M:SingleClin.API.Controllers.PlanController.Update(System.Guid,SingleClin.API.DTOs.Plan.PlanRequestDto)">
            <summary>
            Update an existing plan
            </summary>
            <param name="id">Plan ID</param>
            <param name="planRequest">Updated plan data</param>
            <returns>Updated plan</returns>
            <response code="200">Plan updated successfully</response>
            <response code="400">Invalid plan data or validation errors</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Plan not found</response>
            <response code="409">Plan name already exists</response>
        </member>
        <member name="M:SingleClin.API.Controllers.PlanController.Delete(System.Guid)">
            <summary>
            Delete a plan
            </summary>
            <param name="id">Plan ID</param>
            <returns>Success confirmation</returns>
            <response code="204">Plan deleted successfully</response>
            <response code="400">Invalid plan ID format</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Plan not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.PlanController.GetStatistics">
            <summary>
            Get plan statistics
            </summary>
            <returns>Plan statistics</returns>
            <response code="200">Returns plan statistics</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
        </member>
        <member name="T:SingleClin.API.Controllers.TestAuthController">
            <summary>
            Test controller to demonstrate authorization attributes
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.PublicEndpoint">
            <summary>
            Public endpoint - no authentication required
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.AuthenticatedEndpoint">
            <summary>
            Requires any authenticated user
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.AdminOnlyEndpoint">
            <summary>
            Admin only endpoint
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.ClinicOnlyEndpoint">
            <summary>
            Clinic users only endpoint (Origin or Partner)
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.PatientOnlyEndpoint">
            <summary>
            Patient only endpoint
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.AdminOrClinicEndpoint">
            <summary>
            Multiple roles allowed (Admin or Clinic)
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.GetClinicDetails(System.Guid)">
            <summary>
            Clinic-specific resource - only accessible by the clinic owner
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.GetClinicAdminAccess(System.Guid)">
            <summary>
            Clinic resource accessible by admin or clinic owner
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.CheckClaims">
            <summary>
            Example of using authorization in action - check claims programmatically
            </summary>
        </member>
        <member name="T:SingleClin.API.Controllers.TestResponseController">
            <summary>
            Test controller to demonstrate BaseController and ResponseWrapper functionality
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.GetSuccessWithData">
            <summary>
            Test successful response with data
            </summary>
            <response code="200">Returns the test data wrapped in a successful response</response>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.GetSuccessNoData">
            <summary>
            Test successful response without data
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.CreateItem(SingleClin.API.Controllers.CreateItemRequest)">
            <summary>
            Test created response
            </summary>
            <param name="request">The item creation request</param>
            <response code="201">Returns the created item</response>
            <response code="422">If the request validation fails</response>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.TestValidationError">
            <summary>
            Test validation error response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.GetNotFound(System.Int32)">
            <summary>
            Test not found response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.GetUserInfo">
            <summary>
            Test unauthorized response (requires authentication)
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.AdminOnlyAction">
            <summary>
            Test forbidden response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.ThrowException">
            <summary>
            Test exception handling
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.TestConflict">
            <summary>
            Test conflict response
            </summary>
        </member>
        <member name="T:SingleClin.API.Controllers.CreateItemRequest">
            <summary>
            Request model for creating a test item
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.CreateItemRequest.Name">
            <summary>
            The name of the item (required)
            </summary>
            <example>Test Item 1</example>
        </member>
        <member name="P:SingleClin.API.Controllers.CreateItemRequest.Description">
            <summary>
            Optional description of the item
            </summary>
            <example>This is a test item description</example>
        </member>
        <member name="T:SingleClin.API.Data.AppDbContext">
            <summary>
            Main database context for the SingleClin application
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.AppDbContext.Users">
            <summary>
            Users in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.AppDbContext.Clinics">
            <summary>
            Clinics registered in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.AppDbContext.Plans">
            <summary>
            Available plans for purchase
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.AppDbContext.UserPlans">
            <summary>
            User purchased plans
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.AppDbContext.Transactions">
            <summary>
            Transactions (credit usage)
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.ApplicationDbContext">
            <summary>
            Main database context for the SingleClin application with Identity support
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.ApplicationDbContext.Clinics">
            <summary>
            Clinics registered in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.ApplicationDbContext.Plans">
            <summary>
            Available plans for purchase
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.ApplicationDbContext.UserPlans">
            <summary>
            User purchased plans
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.ApplicationDbContext.Transactions">
            <summary>
            Transactions (credit usage)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.ApplicationDbContext.RefreshTokens">
            <summary>
            Refresh tokens for JWT authentication
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Configurations.ApplicationUserConfiguration">
            <summary>
            Entity configuration for ApplicationUser
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Configurations.BaseEntityConfiguration`1">
            <summary>
            Base configuration for entities that implement IEntity
            </summary>
        </member>
        <member name="M:SingleClin.API.Data.Configurations.BaseEntityConfiguration`1.ConfigureEntity(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            Override this method to add entity-specific configurations
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Configurations.RefreshTokenConfiguration">
            <summary>
            Entity configuration for RefreshToken
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.DatabaseSeeder">
            <summary>
            Seed initial data for the database
            </summary>
        </member>
        <member name="M:SingleClin.API.Data.DatabaseSeeder.SeedAsync">
            <summary>
            Seed all initial data
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.DesignTimeDbContextFactory">
            <summary>
            Design-time factory for EF Core migrations
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Enums.UserRole">
            <summary>
            User roles in the system
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Enums.UserRole.Patient">
            <summary>
            Patient user who can use credits and generate QR codes
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Enums.UserRole.ClinicOrigin">
            <summary>
            Origin clinic that provides services and validates QR codes
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Enums.UserRole.ClinicPartner">
            <summary>
            Partner clinic that can validate QR codes but not provide services
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Enums.UserRole.Administrator">
            <summary>
            System administrator with full access
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Interceptors.AuditingInterceptor">
            <summary>
            Interceptor for logging database operations in development
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.ApplicationUser">
            <summary>
            Extended user class for ASP.NET Core Identity
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.Role">
            <summary>
            User's role in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.ClinicId">
            <summary>
            Associated clinic ID (for clinic users only)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.Clinic">
            <summary>
            Navigation property to the associated clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.FullName">
            <summary>
            User's full name
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.IsActive">
            <summary>
            Whether the user account is active
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.CreatedAt">
            <summary>
            Date when the user was created
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.UpdatedAt">
            <summary>
            Date when the user was last updated
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.LastLoginAt">
            <summary>
            Date when the user last logged in
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.RefreshTokens">
            <summary>
            Refresh tokens for JWT authentication
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.UserPlans">
            <summary>
            User plans (for patients)
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.BaseEntity">
            <summary>
            Base entity class that implements IEntity
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.BaseEntity.Id">
            <summary>
            Unique identifier for the entity
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.BaseEntity.CreatedAt">
            <summary>
            Date and time when the entity was created
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.BaseEntity.UpdatedAt">
            <summary>
            Date and time when the entity was last updated
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.Clinic">
            <summary>
            Represents a clinic in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Name">
            <summary>
            Clinic name
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Type">
            <summary>
            Type of clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Address">
            <summary>
            Clinic address
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.PhoneNumber">
            <summary>
            Clinic phone number
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Email">
            <summary>
            Clinic email
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Cnpj">
            <summary>
            Clinic CNPJ (Brazilian company registration)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.IsActive">
            <summary>
            Indicates if the clinic is active
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Latitude">
            <summary>
            Latitude coordinate
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Longitude">
            <summary>
            Longitude coordinate
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Transactions">
            <summary>
            Transactions processed by this clinic
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.Enums.ClinicType">
            <summary>
            Types of clinics in the system
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.ClinicType.Regular">
            <summary>
            Regular clinic
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.ClinicType.Origin">
            <summary>
            Origin clinic - provides services
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.ClinicType.Partner">
            <summary>
            Partner clinic - has special agreements
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.ClinicType.Administrative">
            <summary>
            Administrative clinic
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.Enums.TransactionStatus">
            <summary>
            Status of a transaction
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.TransactionStatus.Pending">
            <summary>
            Transaction is pending validation
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.TransactionStatus.Validated">
            <summary>
            Transaction was validated successfully
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.TransactionStatus.Cancelled">
            <summary>
            Transaction was cancelled
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.TransactionStatus.Expired">
            <summary>
            Transaction expired before validation
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.Enums.UserRole">
            <summary>
            User roles in the system
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.UserRole.Patient">
            <summary>
            Patient user - can purchase and use plans
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.UserRole.Clinic">
            <summary>
            Clinic user - can validate QR codes
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.UserRole.ClinicOrigin">
            <summary>
            Clinic origin - special clinic type
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.UserRole.ClinicPartner">
            <summary>
            Clinic partner - partner clinic type
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.UserRole.Admin">
            <summary>
            System administrator
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.IEntity">
            <summary>
            Base interface for all entities in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.IEntity.Id">
            <summary>
            Unique identifier for the entity
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.IEntity.CreatedAt">
            <summary>
            Date and time when the entity was created
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.IEntity.UpdatedAt">
            <summary>
            Date and time when the entity was last updated
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.Plan">
            <summary>
            Represents a plan that users can purchase
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.Name">
            <summary>
            Plan name
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.Description">
            <summary>
            Plan description
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.Credits">
            <summary>
            Number of credits included in the plan
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.Price">
            <summary>
            Plan price
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.OriginalPrice">
            <summary>
            Original price (for showing discounts)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.ValidityDays">
            <summary>
            Validity period in days
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.IsActive">
            <summary>
            Indicates if the plan is active for purchase
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.DisplayOrder">
            <summary>
            Display order
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.IsFeatured">
            <summary>
            Indicates if this is a featured plan
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.UserPlans">
            <summary>
            User plans purchased from this plan
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.RefreshToken">
            <summary>
            Refresh token for JWT authentication
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.Token">
            <summary>
            The token value
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.UserId">
            <summary>
            User ID this token belongs to
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.User">
            <summary>
            Navigation property to the user
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.ExpiresAt">
            <summary>
            When the token expires
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.IsRevoked">
            <summary>
            Whether the token has been revoked
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.RevokedAt">
            <summary>
            When the token was revoked
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.DeviceInfo">
            <summary>
            Device information for the token
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.IpAddress">
            <summary>
            IP address from which the token was created
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.IsActive">
            <summary>
            Check if the token is active
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.Transaction">
            <summary>
            Represents a transaction (credit usage) in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.Code">
            <summary>
            Unique transaction code
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.UserPlanId">
            <summary>
            User plan used for this transaction
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.UserPlan">
            <summary>
            Navigation property to UserPlan
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.ClinicId">
            <summary>
            Clinic where the transaction occurred
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.Clinic">
            <summary>
            Navigation property to Clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.Status">
            <summary>
            Transaction status
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.CreditsUsed">
            <summary>
            Number of credits used
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.ServiceDescription">
            <summary>
            Service or procedure description
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.ValidationDate">
            <summary>
            Date when the transaction was validated
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.ValidatedBy">
            <summary>
            User who validated the transaction (clinic staff)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.ValidationNotes">
            <summary>
            Validation notes
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.IpAddress">
            <summary>
            IP address from where the transaction was created
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.UserAgent">
            <summary>
            User agent of the device that created the transaction
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.Latitude">
            <summary>
            Latitude where the transaction occurred
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.Longitude">
            <summary>
            Longitude where the transaction occurred
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.CancellationReason">
            <summary>
            Cancellation reason if cancelled
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.CancellationDate">
            <summary>
            Date when the transaction was cancelled
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.User">
            <summary>
            Represents a user in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.Email">
            <summary>
            User's email address (unique)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.Role">
            <summary>
            User's role in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.DisplayName">
            <summary>
            User's display name
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.PhoneNumber">
            <summary>
            User's phone number
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.FirebaseUid">
            <summary>
            Firebase UID for authentication
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.IsActive">
            <summary>
            Indicates if the user account is active
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.UserPlans">
            <summary>
            User's purchased plans
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.UserPlan">
            <summary>
            Represents a plan purchased by a user
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.UserId">
            <summary>
            User who purchased the plan
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.User">
            <summary>
            Navigation property to User
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.PlanId">
            <summary>
            Plan that was purchased
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.Plan">
            <summary>
            Navigation property to Plan
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.Credits">
            <summary>
            Number of credits purchased
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.CreditsRemaining">
            <summary>
            Number of credits remaining
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.AmountPaid">
            <summary>
            Amount paid for the plan
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.ExpirationDate">
            <summary>
            Date when the plan expires
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.IsActive">
            <summary>
            Indicates if the plan is currently active
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.PaymentMethod">
            <summary>
            Payment method used
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.PaymentTransactionId">
            <summary>
            Payment transaction ID from payment provider
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.Notes">
            <summary>
            Notes about the purchase
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.Transactions">
            <summary>
            Transactions made using this plan
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Seeders.RoleSeeder">
            <summary>
            Seeder for creating default roles in the system
            </summary>
        </member>
        <member name="M:SingleClin.API.Data.Seeders.RoleSeeder.SeedRolesAsync(System.IServiceProvider)">
            <summary>
            Seeds the default roles into the database
            </summary>
        </member>
        <member name="M:SingleClin.API.Data.Seeders.RoleSeeder.SeedDefaultAdminAsync(System.IServiceProvider)">
            <summary>
            Seeds default admin user if it doesn't exist
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Auth.AuthResponseDto">
            <summary>
            Data transfer object for authentication response
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.AccessToken">
            <summary>
            JWT access token
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.RefreshToken">
            <summary>
            Refresh token for getting new access tokens
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.ExpiresIn">
            <summary>
            Access token expiration time in seconds
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.UserId">
            <summary>
            User's ID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.Email">
            <summary>
            User's email
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.FullName">
            <summary>
            User's full name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.Role">
            <summary>
            User's role
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.ClinicId">
            <summary>
            Associated clinic ID (for clinic users)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.IsFirstLogin">
            <summary>
            Indicates if this is the user's first login
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Auth.LoginDto">
            <summary>
            Data transfer object for user login
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.LoginDto.Email">
            <summary>
            User's email address
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.LoginDto.Password">
            <summary>
            User's password
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.LoginDto.RememberMe">
            <summary>
            Whether to remember the user (for longer refresh token expiration)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.LoginDto.DeviceInfo">
            <summary>
            Device information for tracking refresh tokens
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Auth.RefreshTokenDto">
            <summary>
            Data transfer object for refresh token request
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RefreshTokenDto.RefreshToken">
            <summary>
            The refresh token
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RefreshTokenDto.DeviceInfo">
            <summary>
            Device information for tracking refresh tokens
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Auth.RegisterDto">
            <summary>
            Data transfer object for user registration
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RegisterDto.Email">
            <summary>
            User's email address
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RegisterDto.Password">
            <summary>
            User's password
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RegisterDto.ConfirmPassword">
            <summary>
            Confirm password
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RegisterDto.FullName">
            <summary>
            User's full name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RegisterDto.Role">
            <summary>
            User's role in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RegisterDto.ClinicName">
            <summary>
            Clinic name (required for clinic users)
            </summary>
        </member>
        <member name="M:SingleClin.API.DTOs.Auth.RegisterDto.IsValid">
            <summary>
            Validates if clinic name is required based on role
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Auth.SocialLoginDto">
            <summary>
            Data transfer object for social login
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.SocialLoginDto.IdToken">
            <summary>
            Firebase ID token from social provider
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.SocialLoginDto.Provider">
            <summary>
            Social provider (google, apple)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.SocialLoginDto.DeviceInfo">
            <summary>
            Device information for tracking refresh tokens
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.SocialLoginDto.FullName">
            <summary>
            User's full name (optional, used if not provided by social provider)
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Common.PagedResultDto`1">
            <summary>
            Generic paginated result data transfer object
            </summary>
            <typeparam name="T">Type of items in the result</typeparam>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.Items">
            <summary>
            List of items in current page
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.PageNumber">
            <summary>
            Current page number (1-based)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.PageSize">
            <summary>
            Number of items per page
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.TotalCount">
            <summary>
            Total number of items across all pages
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.TotalPages">
            <summary>
            Total number of pages
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.HasPreviousPage">
            <summary>
            Whether there is a previous page
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.HasNextPage">
            <summary>
            Whether there is a next page
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.ItemCount">
            <summary>
            Number of items in current page
            </summary>
        </member>
        <member name="M:SingleClin.API.DTOs.Common.PagedResultDto`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new paginated result
            </summary>
        </member>
        <member name="M:SingleClin.API.DTOs.Common.PagedResultDto`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Plan.PlanFilterDto">
            <summary>
            Data transfer object for filtering plans
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.PageNumber">
            <summary>
            Page number (1-based)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.PageSize">
            <summary>
            Number of items per page
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.IsActive">
            <summary>
            Filter by active status
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.IsFeatured">
            <summary>
            Filter by featured status
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.SearchTerm">
            <summary>
            Search term for name or description
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.MinPrice">
            <summary>
            Minimum price filter
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.MaxPrice">
            <summary>
            Maximum price filter
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.MinCredits">
            <summary>
            Minimum credits filter
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.MaxCredits">
            <summary>
            Maximum credits filter
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.SortBy">
            <summary>
            Sort field
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.SortDirection">
            <summary>
            Sort direction (asc or desc)
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Plan.PlanRequestDto">
            <summary>
            Data transfer object for creating or updating a plan
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.Name">
            <summary>
            Plan name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.Description">
            <summary>
            Plan description
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.Credits">
            <summary>
            Number of credits included in the plan
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.Price">
            <summary>
            Plan price
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.OriginalPrice">
            <summary>
            Original price (for discounts)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.ValidityDays">
            <summary>
            Validity period in days
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.IsActive">
            <summary>
            Whether the plan is active
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.DisplayOrder">
            <summary>
            Display order for sorting
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.IsFeatured">
            <summary>
            Whether this is a featured plan
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Plan.PlanResponseDto">
            <summary>
            Data transfer object for plan response
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.Id">
            <summary>
            Plan unique identifier
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.Name">
            <summary>
            Plan name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.Description">
            <summary>
            Plan description
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.Credits">
            <summary>
            Number of credits included in the plan
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.Price">
            <summary>
            Plan price
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.OriginalPrice">
            <summary>
            Original price (for showing discounts)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.ValidityDays">
            <summary>
            Validity period in days
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.IsActive">
            <summary>
            Whether the plan is active
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.DisplayOrder">
            <summary>
            Display order for sorting
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.IsFeatured">
            <summary>
            Whether this is a featured plan
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.CreatedAt">
            <summary>
            When the plan was created
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.UpdatedAt">
            <summary>
            When the plan was last updated
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.DiscountPercentage">
            <summary>
            Calculated discount percentage (if OriginalPrice is set)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.PricePerCredit">
            <summary>
            Calculated price per credit
            </summary>
        </member>
        <member name="T:SingleClin.API.Exceptions.PlanNotFoundException">
            <summary>
            Exception thrown when a plan is not found
            </summary>
        </member>
        <member name="T:SingleClin.API.Exceptions.DuplicatePlanNameException">
            <summary>
            Exception thrown when attempting to create a plan with a duplicate name
            </summary>
        </member>
        <member name="T:SingleClin.API.Exceptions.PlanValidationException">
            <summary>
            Exception thrown when plan validation fails
            </summary>
        </member>
        <member name="T:SingleClin.API.Exceptions.InvalidPlanOperationException">
            <summary>
            Exception thrown when attempting to perform invalid operations on plans
            </summary>
        </member>
        <member name="T:SingleClin.API.Extensions.DatabaseExtensions">
            <summary>
            Extension methods for database configuration
            </summary>
        </member>
        <member name="M:SingleClin.API.Extensions.DatabaseExtensions.ConfigureDatabaseAsync(Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            Configure database migrations and seeding
            </summary>
        </member>
        <member name="T:SingleClin.API.Filters.SwaggerDefaultValues">
            <summary>
            Swagger operation filter to improve API documentation
            </summary>
        </member>
        <member name="M:SingleClin.API.Filters.SwaggerDefaultValues.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Apply the filter to the operation
            </summary>
        </member>
        <member name="T:SingleClin.API.HealthChecks.ApiHealthCheck">
            <summary>
            General API health check
            </summary>
        </member>
        <member name="T:SingleClin.API.HealthChecks.FirebaseHealthCheck">
            <summary>
            Health check for Firebase Admin SDK connectivity
            </summary>
        </member>
        <member name="T:SingleClin.API.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Migrations.ApplicationDb.AddIdentityAndRefreshTokens">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddIdentityAndRefreshTokens.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddIdentityAndRefreshTokens.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddIdentityAndRefreshTokens.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Migrations.ApplicationDb.AddLastLoginAtToApplicationUser">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddLastLoginAtToApplicationUser.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddLastLoginAtToApplicationUser.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddLastLoginAtToApplicationUser.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Repositories.IPlanRepository">
            <summary>
            Repository contract for Plan entity operations
            </summary>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.GetAllAsync(System.Int32,System.Int32,System.Nullable{System.Boolean},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Get all plans with pagination and filtering
            </summary>
            <param name="pageNumber">Page number (1-based)</param>
            <param name="pageSize">Number of items per page</param>
            <param name="isActive">Filter by active status (null for all)</param>
            <param name="searchTerm">Search term for name or description</param>
            <param name="minPrice">Minimum price filter</param>
            <param name="maxPrice">Maximum price filter</param>
            <param name="isFeatured">Filter by featured status (null for all)</param>
            <param name="minCredits">Minimum credits filter</param>
            <param name="maxCredits">Maximum credits filter</param>
            <param name="sortBy">Field to sort by</param>
            <param name="sortDirection">Sort direction (asc or desc)</param>
            <returns>Paginated list of plans</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.GetByIdAsync(System.Guid)">
            <summary>
            Get plan by ID
            </summary>
            <param name="id">Plan ID</param>
            <returns>Plan if found, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.GetByNameAsync(System.String)">
            <summary>
            Get plan by name
            </summary>
            <param name="name">Plan name</param>
            <returns>Plan if found, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.GetActiveAsync">
            <summary>
            Get all active plans ordered by display order
            </summary>
            <returns>List of active plans</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.CreateAsync(SingleClin.API.Data.Models.Plan)">
            <summary>
            Create a new plan
            </summary>
            <param name="plan">Plan to create</param>
            <returns>Created plan</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.UpdateAsync(SingleClin.API.Data.Models.Plan)">
            <summary>
            Update an existing plan
            </summary>
            <param name="plan">Plan to update</param>
            <returns>Updated plan</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.DeleteAsync(System.Guid)">
            <summary>
            Delete a plan (soft delete)
            </summary>
            <param name="id">Plan ID to delete</param>
            <returns>True if deleted, false if not found</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.NameExistsAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Check if plan name exists (for validation)
            </summary>
            <param name="name">Plan name to check</param>
            <param name="excludeId">Plan ID to exclude from check (for updates)</param>
            <returns>True if name exists, false otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.GetCountsByStatusAsync">
            <summary>
            Get plans count by status
            </summary>
            <returns>Dictionary with status counts</returns>
        </member>
        <member name="T:SingleClin.API.Repositories.PlanRepository">
            <summary>
            Repository implementation for Plan entity operations
            </summary>
        </member>
        <member name="M:SingleClin.API.Repositories.PlanRepository.ApplySorting(System.Linq.IQueryable{SingleClin.API.Data.Models.Plan},System.String,System.String)">
            <summary>
            Apply dynamic sorting to the query based on sort field and direction
            </summary>
            <param name="query">The query to sort</param>
            <param name="sortBy">Field to sort by</param>
            <param name="sortDirection">Sort direction (asc or desc)</param>
            <returns>Sorted query</returns>
        </member>
        <member name="T:SingleClin.API.Services.AuthService">
            <summary>
            Service for handling authentication operations
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.ClaimsTransformationService">
            <summary>
            Service for transforming and adding claims dynamically during authentication
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.FirebaseAuthService">
            <summary>
            Service for Firebase authentication operations
            </summary>
        </member>
        <member name="P:SingleClin.API.Services.FirebaseAuthService.IsConfigured">
            <summary>
            Check if Firebase is properly configured
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.IAuthService">
            <summary>
            Service interface for authentication operations
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.RegisterAsync(SingleClin.API.DTOs.Auth.RegisterDto,System.String)">
            <summary>
            Register a new user
            </summary>
            <param name="registerDto">Registration data</param>
            <param name="ipAddress">Client IP address</param>
            <returns>Authentication response with tokens</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.LoginAsync(SingleClin.API.DTOs.Auth.LoginDto,System.String)">
            <summary>
            Authenticate a user with email and password
            </summary>
            <param name="loginDto">Login credentials</param>
            <param name="ipAddress">Client IP address</param>
            <returns>Authentication response with tokens</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.RefreshTokenAsync(System.String,System.String)">
            <summary>
            Refresh access token using refresh token
            </summary>
            <param name="refreshToken">Refresh token</param>
            <param name="ipAddress">Client IP address</param>
            <returns>New authentication response with tokens</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.LogoutAsync(System.Guid,System.String)">
            <summary>
            Logout user by invalidating refresh token
            </summary>
            <param name="userId">User ID</param>
            <param name="refreshToken">Current refresh token to invalidate</param>
            <returns>Success status</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.RevokeAllUserTokensAsync(System.Guid)">
            <summary>
            Revoke all refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <returns>Number of tokens revoked</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.CleanupExpiredTokensAsync">
            <summary>
            Clean up expired refresh tokens
            </summary>
            <returns>Number of tokens removed</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.SocialLoginAsync(SingleClin.API.DTOs.Auth.SocialLoginDto,System.String)">
            <summary>
            Authenticate a user with social login
            </summary>
            <param name="socialLoginDto">Social login data</param>
            <param name="ipAddress">Client IP address</param>
            <returns>Authentication response with tokens</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.GetUserClaimsAsync(System.Guid)">
            <summary>
            Get user claims for authenticated user
            </summary>
            <param name="userId">User ID</param>
            <returns>Dictionary of user claims</returns>
        </member>
        <member name="T:SingleClin.API.Services.IFirebaseAuthService">
            <summary>
            Service interface for Firebase authentication operations
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IFirebaseAuthService.VerifyIdTokenAsync(System.String)">
            <summary>
            Verify a Firebase ID token
            </summary>
            <param name="idToken">The Firebase ID token to verify</param>
            <returns>Firebase token information if valid, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Services.IFirebaseAuthService.GetUserAsync(System.String)">
            <summary>
            Get user information from Firebase
            </summary>
            <param name="uid">Firebase user ID</param>
            <returns>User record if found, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Services.IFirebaseAuthService.CreateCustomTokenAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a custom token for a user
            </summary>
            <param name="uid">User ID</param>
            <param name="claims">Optional custom claims</param>
            <returns>Custom token</returns>
        </member>
        <member name="M:SingleClin.API.Services.IFirebaseAuthService.DeleteUserAsync(System.String)">
            <summary>
            Delete a user from Firebase
            </summary>
            <param name="uid">Firebase user ID</param>
            <returns>Success status</returns>
        </member>
        <member name="P:SingleClin.API.Services.IFirebaseAuthService.IsConfigured">
            <summary>
            Check if Firebase is properly configured
            </summary>
            <returns>True if Firebase is configured, false otherwise</returns>
        </member>
        <member name="T:SingleClin.API.Services.IPlanService">
            <summary>
            Service contract for Plan business logic
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.GetAllAsync(SingleClin.API.DTOs.Plan.PlanFilterDto)">
            <summary>
            Get all plans with pagination and filtering
            </summary>
            <param name="filter">Filter criteria</param>
            <returns>Paginated list of plans</returns>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.GetByIdAsync(System.Guid)">
            <summary>
            Get plan by ID
            </summary>
            <param name="id">Plan ID</param>
            <returns>Plan if found, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.GetActiveAsync">
            <summary>
            Get all active plans
            </summary>
            <returns>List of active plans</returns>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.CreateAsync(SingleClin.API.DTOs.Plan.PlanRequestDto)">
            <summary>
            Create a new plan
            </summary>
            <param name="planRequest">Plan data</param>
            <returns>Created plan</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when plan name already exists</exception>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.UpdateAsync(System.Guid,SingleClin.API.DTOs.Plan.PlanRequestDto)">
            <summary>
            Update an existing plan
            </summary>
            <param name="id">Plan ID</param>
            <param name="planRequest">Updated plan data</param>
            <returns>Updated plan</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when plan not found or name already exists</exception>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.DeleteAsync(System.Guid)">
            <summary>
            Delete a plan (soft delete)
            </summary>
            <param name="id">Plan ID</param>
            <returns>True if deleted, false if not found</returns>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.GetStatisticsAsync">
            <summary>
            Get statistics about plans
            </summary>
            <returns>Dictionary with plan statistics</returns>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.ValidateAsync(SingleClin.API.DTOs.Plan.PlanRequestDto,System.Nullable{System.Guid})">
            <summary>
            Validate plan data
            </summary>
            <param name="planRequest">Plan data to validate</param>
            <param name="excludeId">Plan ID to exclude from uniqueness checks (for updates)</param>
            <returns>List of validation errors</returns>
        </member>
        <member name="T:SingleClin.API.Services.IRefreshTokenService">
            <summary>
            Service interface for refresh token management
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IRefreshTokenService.CreateRefreshTokenAsync(System.Guid,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Create and store a new refresh token for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="ipAddress">Client IP address</param>
            <param name="deviceInfo">Device information</param>
            <param name="expirationDays">Token expiration in days</param>
            <returns>The created refresh token</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRefreshTokenService.ValidateRefreshTokenAsync(System.String)">
            <summary>
            Validate a refresh token and return the associated user ID
            </summary>
            <param name="token">Refresh token to validate</param>
            <returns>User ID if valid, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRefreshTokenService.RevokeTokenAsync(System.String)">
            <summary>
            Revoke a specific refresh token
            </summary>
            <param name="token">Token to revoke</param>
            <returns>Success status</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRefreshTokenService.RevokeAllUserTokensAsync(System.Guid)">
            <summary>
            Revoke all refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <returns>Number of tokens revoked</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRefreshTokenService.GetActiveUserTokensAsync(System.Guid)">
            <summary>
            Get active refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <returns>List of active refresh tokens</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRefreshTokenService.CleanupExpiredTokensAsync">
            <summary>
            Clean up expired refresh tokens
            </summary>
            <returns>Number of tokens removed</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRefreshTokenService.UpdateDeviceInfoAsync(System.String,System.String)">
            <summary>
            Update device info for a refresh token
            </summary>
            <param name="token">Refresh token</param>
            <param name="deviceInfo">New device information</param>
            <returns>Success status</returns>
        </member>
        <member name="T:SingleClin.API.Services.PlanService">
            <summary>
            Service implementation for Plan business logic
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.RefreshTokenService">
            <summary>
            Service for managing refresh tokens
            </summary>
        </member>
        <member name="T:SingleClin.API.Validators.PlanRequestValidator">
            <summary>
            Validator for PlanRequestDto using FluentValidation
            </summary>
        </member>
        <member name="M:SingleClin.API.Validators.PlanRequestValidator.HaveMaxTwoDecimalPlaces(System.Decimal)">
            <summary>
            Validates that decimal value has maximum 2 decimal places
            </summary>
            <param name="value">Decimal value to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Validators.PlanRequestValidator.HaveMaxTwoDecimalPlaces(System.Nullable{System.Decimal})">
            <summary>
            Validates that nullable decimal value has maximum 2 decimal places
            </summary>
            <param name="value">Nullable decimal value to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
    </members>
</doc>
