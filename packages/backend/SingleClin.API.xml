<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SingleClin.API</name>
    </assembly>
    <members>
        <member name="T:SingleClin.API.Attributes.AuthorizeClinicOwnerAttribute">
            <summary>
            Authorization attribute that ensures the user owns or belongs to the clinic being accessed
            </summary>
        </member>
        <member name="M:SingleClin.API.Attributes.AuthorizeClinicOwnerAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the AuthorizeClinicOwnerAttribute
            </summary>
            <param name="clinicIdParameterName">The name of the route/query parameter containing the clinic ID</param>
            <param name="allowAdmin">Whether to allow administrators to bypass the check</param>
        </member>
        <member name="T:SingleClin.API.Attributes.AuthorizeAdminOrClinicOwnerAttribute">
            <summary>
            Authorization attribute that allows either admin or clinic owner
            </summary>
        </member>
        <member name="T:SingleClin.API.Attributes.AuthorizeRoleAttribute">
            <summary>
            Custom authorization attribute for role-based access control
            </summary>
        </member>
        <member name="M:SingleClin.API.Attributes.AuthorizeRoleAttribute.#ctor(SingleClin.API.Data.Enums.UserRole[])">
            <summary>
            Initializes a new instance of the AuthorizeRoleAttribute
            </summary>
            <param name="roles">Allowed roles</param>
        </member>
        <member name="T:SingleClin.API.Attributes.AuthorizeAdminAttribute">
            <summary>
            Authorize attribute for Administrator role
            </summary>
        </member>
        <member name="T:SingleClin.API.Attributes.AuthorizeClinicAttribute">
            <summary>
            Authorize attribute for Clinic roles (Origin and Partner)
            </summary>
        </member>
        <member name="T:SingleClin.API.Attributes.AuthorizePatientAttribute">
            <summary>
            Authorize attribute for Patient role
            </summary>
        </member>
        <member name="T:SingleClin.API.Attributes.AuthorizeAnyRoleAttribute">
            <summary>
            Authorize attribute for any authenticated user
            </summary>
        </member>
        <member name="T:SingleClin.API.Controllers.AppointmentsController">
            <summary>
            Controller for managing appointments
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.AppointmentsController.ScheduleAppointment(SingleClin.API.DTOs.Appointment.AppointmentScheduleDto)">
            <summary>
            Schedule a new appointment
            </summary>
            <param name="scheduleDto">Appointment scheduling data</param>
            <returns>Appointment summary with confirmation details</returns>
            <response code="201">Appointment scheduled successfully</response>
            <response code="400">Invalid appointment data or insufficient credits</response>
            <response code="401">Unauthorized</response>
            <response code="404">Service or clinic not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AppointmentsController.ConfirmAppointment(SingleClin.API.DTOs.Appointment.AppointmentConfirmationDto)">
            <summary>
            Confirm a scheduled appointment and debit credits
            </summary>
            <param name="confirmationDto">Appointment confirmation data</param>
            <returns>Confirmed appointment details</returns>
            <response code="200">Appointment confirmed successfully</response>
            <response code="400">Invalid confirmation token or insufficient credits</response>
            <response code="401">Unauthorized</response>
            <response code="404">Appointment not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AppointmentsController.GetAppointmentById(System.Guid)">
            <summary>
            Get appointment details by ID
            </summary>
            <param name="appointmentId">Appointment ID</param>
            <returns>Appointment details</returns>
            <response code="200">Returns appointment details</response>
            <response code="401">Unauthorized</response>
            <response code="403">Access forbidden - not your appointment</response>
            <response code="404">Appointment not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AppointmentsController.GetMyAppointments(System.Boolean)">
            <summary>
            Get user's appointments
            </summary>
            <param name="includeCompleted">Include completed appointments (default: false)</param>
            <returns>List of user's appointments</returns>
            <response code="200">Returns list of appointments</response>
            <response code="401">Unauthorized</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AppointmentsController.CancelAppointment(System.Guid,System.String)">
            <summary>
            Cancel an appointment
            </summary>
            <param name="appointmentId">Appointment ID</param>
            <param name="reason">Cancellation reason (optional)</param>
            <returns>Cancelled appointment details</returns>
            <response code="200">Appointment cancelled successfully</response>
            <response code="400">Cannot cancel appointment in current state</response>
            <response code="401">Unauthorized</response>
            <response code="403">Access forbidden - not your appointment</response>
            <response code="404">Appointment not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AppointmentsController.GetAppointmentByToken(System.String)">
            <summary>
            Get appointment summary by confirmation token (public endpoint)
            </summary>
            <param name="token">Confirmation token</param>
            <returns>Appointment summary for confirmation</returns>
            <response code="200">Returns appointment summary</response>
            <response code="400">Invalid token</response>
            <response code="404">Appointment not found or token expired</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AppointmentsController.CompleteAppointment(System.Guid)">
            <summary>
            Complete an appointment (for clinic use)
            </summary>
            <param name="appointmentId">Appointment ID</param>
            <returns>Completed appointment details</returns>
            <response code="200">Appointment completed successfully</response>
            <response code="400">Cannot complete appointment in current state</response>
            <response code="401">Unauthorized</response>
            <response code="403">Access forbidden - clinic access required</response>
            <response code="404">Appointment not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AppointmentsController.GetMyCredits">
            <summary>
            Get current user's available credits
            </summary>
            <returns>User's available credits information</returns>
            <response code="200">Returns user's credit information</response>
            <response code="401">Unauthorized</response>
        </member>
        <member name="T:SingleClin.API.Controllers.AuthController">
            <summary>
            Controller for authentication endpoints
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.Register(SingleClin.API.DTOs.Auth.RegisterDto)">
            <summary>
            Register a new user
            </summary>
            <param name="registerDto">Registration information</param>
            <returns>Authentication response with tokens</returns>
            <response code="200">Registration successful</response>
            <response code="400">Invalid registration data or email already exists</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.Login(SingleClin.API.DTOs.Auth.LoginDto)">
            <summary>
            Login with email and password
            </summary>
            <param name="loginDto">Login credentials</param>
            <returns>Authentication response with tokens</returns>
            <response code="200">Login successful</response>
            <response code="401">Invalid credentials</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.RefreshToken(SingleClin.API.DTOs.Auth.RefreshTokenDto)">
            <summary>
            Refresh access token using refresh token
            </summary>
            <param name="refreshTokenDto">Refresh token information</param>
            <returns>New authentication response with tokens</returns>
            <response code="200">Token refreshed successfully</response>
            <response code="401">Invalid or expired refresh token</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.Logout">
            <summary>
            Logout current user
            </summary>
            <returns>Success status</returns>
            <response code="200">Logout successful</response>
            <response code="401">Not authenticated</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.GetCurrentUser">
            <summary>
            Get current user information
            </summary>
            <returns>Current user details</returns>
            <response code="200">User information retrieved</response>
            <response code="401">Not authenticated</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.GetUserClaims">
            <summary>
            Get user claims for authenticated user
            </summary>
            <returns>User claims and permissions</returns>
            <response code="200">User claims retrieved successfully</response>
            <response code="401">Not authenticated</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.FirebaseLogin(SingleClin.API.DTOs.Auth.FirebaseLoginDto)">
            <summary>
            Login with Firebase authentication token
            </summary>
            <param name="firebaseLoginDto">Firebase login information</param>
            <returns>Authentication response with tokens</returns>
            <response code="200">Firebase login successful</response>
            <response code="400">Invalid Firebase token</response>
            <response code="401">Firebase authentication failed</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.SocialLogin(SingleClin.API.DTOs.Auth.SocialLoginDto)">
            <summary>
            Login with social provider (Google or Apple)
            </summary>
            <param name="socialLoginDto">Social login information</param>
            <returns>Authentication response with tokens</returns>
            <response code="200">Social login successful</response>
            <response code="400">Invalid social login data</response>
            <response code="503">Social login not available</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.RevokeAllTokens">
            <summary>
            Revoke all refresh tokens for current user (logout from all devices)
            </summary>
            <returns>Number of tokens revoked</returns>
            <response code="200">Tokens revoked successfully</response>
            <response code="401">Not authenticated</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.CreateAdmin(SingleClin.API.DTOs.Auth.RegisterDto)">
            <summary>
            [DEVELOPMENT ONLY] Create an Administrator account
            </summary>
            <param name="adminDto">Administrator account information</param>
            <returns>Created administrator details</returns>
            <response code="200">Administrator created successfully</response>
            <response code="400">Invalid data or email already exists</response>
            <response code="503">Not available in production</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthController.SyncUser(SingleClin.API.DTOs.Auth.SyncUserDto)">
            <summary>
            Sync Firebase user with backend database
            </summary>
            <param name="syncUserDto">Firebase user sync data</param>
            <returns>User authentication response</returns>
            <response code="200">User sync successful</response>
            <response code="400">Invalid sync data</response>
            <response code="401">Firebase authentication failed</response>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthTestController.GetPublic">
            <summary>
            Public endpoint - no authentication required
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthTestController.GetProtected">
            <summary>
            Protected endpoint - requires authentication
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthTestController.GetAdminOnly">
            <summary>
            Admin only endpoint
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthTestController.GetClinicOnly">
            <summary>
            Clinic only endpoint
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.AuthTestController.GetPatientOnly">
            <summary>
            Patient only endpoint
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.BaseController.CurrentUserId">
            <summary>
            Gets the current authenticated user's ID from the JWT token
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.BaseController.CurrentUserEmail">
            <summary>
            Gets the current authenticated user's email from the JWT token
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.BaseController.CurrentUserRole">
            <summary>
            Gets the current authenticated user's role from the JWT token
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.BaseController.CurrentUserClinicId">
            <summary>
            Gets the current authenticated user's clinic ID from the JWT token (if applicable)
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.IsInRole(System.String)">
            <summary>
            Checks if the current user has a specific role
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.BaseController.IsAdmin">
            <summary>
            Checks if the current user is an admin
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.BaseController.IsClinicUser">
            <summary>
            Checks if the current user is a clinic user (any type)
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.BaseController.IsPatient">
            <summary>
            Checks if the current user is a patient
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.OkResponse``1(``0,System.String)">
            <summary>
            Returns a successful response with data
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.OkResponse(System.String)">
            <summary>
            Returns a successful response without data
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.CreatedResponse``1(``0,System.String,System.String)">
            <summary>
            Returns a created response with data
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.BadRequestResponse(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Returns a bad request response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.ValidationErrorResponse(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Returns a validation error response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.ValidationErrorResponse">
            <summary>
            Returns a validation error response from ModelState
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.UnauthorizedResponse(System.String)">
            <summary>
            Returns an unauthorized response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.ForbiddenResponse(System.String)">
            <summary>
            Returns a forbidden response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.NotFoundResponse(System.String)">
            <summary>
            Returns a not found response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.ConflictResponse(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Returns a conflict response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.InternalServerErrorResponse(System.String)">
            <summary>
            Returns an internal server error response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.CustomResponse``1(System.Int32,``0,System.String)">
            <summary>
            Returns a custom status code response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.CustomErrorResponse(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Returns a custom error response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.GetUserRole">
            <summary>
            Gets the user role from claims
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.GetModelStateErrors">
            <summary>
            Gets model state errors as a list of strings
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.BaseController.GetUserClinicId">
            <summary>
            Gets the user's clinic ID as a Guid
            </summary>
        </member>
        <member name="T:SingleClin.API.Controllers.ClinicController">
            <summary>
            Controller for managing clinics
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.GetAll(SingleClin.API.DTOs.Clinic.ClinicFilterDto)">
            <summary>
            Get all clinics with pagination and filtering (Admin Only)
            </summary>
            <param name="filter">Filter criteria including pagination, search, type, status, and sorting</param>
            <returns>Paginated list of clinics</returns>
            <response code="200">Returns the paginated list of clinics</response>
            <response code="400">Invalid filter parameters</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <example>
            GET /api/clinic?pageNumber=1&amp;pageSize=10&amp;isActive=true&amp;searchTerm=clinic&amp;type=Partner&amp;city=São Paulo&amp;sortBy=name&amp;sortDirection=asc
            </example>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.GetAllForDev(SingleClin.API.DTOs.Clinic.ClinicFilterDto)">
            <summary>
            Get active clinics (Public endpoint)
            </summary>
            <returns>List of active clinics</returns>
            <response code="200">Returns list of active clinics</response>
            <summary>
            Get all clinics (Development Only - No Auth)
            </summary>
            <param name="filter">Filter criteria</param>
            <returns>Paginated list of clinics</returns>
            <response code="200">Returns the paginated list of clinics</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.GenerateRealToken(SingleClin.API.DTOs.Auth.LoginDto,Microsoft.AspNetCore.Identity.UserManager{SingleClin.API.Data.Models.ApplicationUser},SingleClin.API.Services.IJwtService)">
            <summary>
            Generate Real User Token (Development Only)
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.DebugToken">
            <summary>
            Debug Token Claims (Development Only)
            </summary>
            <returns>Current user's claims</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.CreateIdentityUsers(Microsoft.AspNetCore.Identity.UserManager{SingleClin.API.Data.Models.ApplicationUser})">
            <summary>
            Create Identity users only (DEV ONLY)
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.SimpleTest">
            <summary>
            Simple test endpoint
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.GenerateTestToken">
            <summary>
            Generate test JWT token (Development Only)
            </summary>
            <returns>Test JWT token for debugging</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.GetById(System.Guid)">
            <summary>
            Get clinic by ID
            </summary>
            <param name="id">Clinic ID</param>
            <returns>Clinic details</returns>
            <response code="200">Returns the clinic</response>
            <response code="401">Unauthorized</response>
            <response code="404">Clinic not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.Create(SingleClin.API.DTOs.Clinic.ClinicRequestDto)">
            <summary>
            Create a new clinic (Admin Only)
            </summary>
            <param name="clinicRequest">Clinic data</param>
            <returns>Created clinic</returns>
            <response code="201">Clinic created successfully</response>
            <response code="400">Invalid clinic data</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="409">Clinic name or CNPJ already exists</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.Update(System.Guid,SingleClin.API.DTOs.Clinic.ClinicRequestDto)">
            <summary>
            Update an existing clinic (Admin Only)
            </summary>
            <param name="id">Clinic ID</param>
            <param name="clinicRequest">Updated clinic data</param>
            <returns>Updated clinic</returns>
            <response code="200">Clinic updated successfully</response>
            <response code="400">Invalid clinic data</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Clinic not found</response>
            <response code="409">Clinic name or CNPJ already exists</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.Delete(System.Guid)">
            <summary>
            Delete a clinic (soft delete) (Admin Only)
            </summary>
            <param name="id">Clinic ID</param>
            <returns>Success status</returns>
            <response code="204">Clinic deleted successfully</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Clinic not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.ToggleStatus(System.Guid)">
            <summary>
            Toggle clinic active status (Admin Only)
            </summary>
            <param name="id">Clinic ID</param>
            <returns>Updated clinic with new status</returns>
            <response code="200">Clinic status toggled successfully</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Clinic not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.GetStatistics">
            <summary>
            Get clinic statistics (Admin Only)
            </summary>
            <returns>Clinic statistics</returns>
            <response code="200">Returns clinic statistics</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.UploadImage(System.Guid,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Upload clinic image (Admin Only)
            </summary>
            <param name="id">Clinic ID</param>
            <param name="image">Image file to upload</param>
            <returns>Updated clinic with new image</returns>
            <response code="200">Image uploaded successfully</response>
            <response code="400">Invalid image file or clinic data</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Clinic not found</response>
            <response code="413">File too large</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.DeleteImage(System.Guid)">
            <summary>
            Delete clinic image (Admin Only)
            </summary>
            <param name="id">Clinic ID</param>
            <returns>Updated clinic without image</returns>
            <response code="200">Image deleted successfully</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Clinic not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.UploadImages(System.Guid,SingleClin.API.DTOs.Clinic.MultipleImageUploadDto)">
            <summary>
            Upload multiple images to a clinic (Admin Only)
            </summary>
            <param name="id">Clinic ID</param>
            <param name="uploadDto">Multiple images upload data</param>
            <returns>Upload response with results</returns>
            <response code="200">Images uploaded successfully</response>
            <response code="400">Invalid image files or clinic data</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Clinic not found</response>
            <response code="413">File too large</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.GetImages(System.Guid)">
            <summary>
            Get all images for a clinic
            </summary>
            <param name="id">Clinic ID</param>
            <returns>List of clinic images</returns>
            <response code="200">Images retrieved successfully</response>
            <response code="404">Clinic not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.UpdateImage(System.Guid,System.Guid,SingleClin.API.DTOs.Clinic.ClinicImageUpdateDto)">
            <summary>
            Update image properties (Admin Only)
            </summary>
            <param name="id">Clinic ID</param>
            <param name="imageId">Image ID</param>
            <param name="updateDto">Updated image data</param>
            <returns>Updated image</returns>
            <response code="200">Image updated successfully</response>
            <response code="400">Invalid request data</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Clinic or image not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.DeleteImageById(System.Guid,System.Guid)">
            <summary>
            Delete a specific image from a clinic (Admin Only)
            </summary>
            <param name="id">Clinic ID</param>
            <param name="imageId">Image ID</param>
            <returns>Success result</returns>
            <response code="204">Image deleted successfully</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Clinic or image not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.SetFeaturedImage(System.Guid,System.Guid)">
            <summary>
            Set featured image for a clinic (Admin Only)
            </summary>
            <param name="id">Clinic ID</param>
            <param name="imageId">Image ID to set as featured</param>
            <returns>Updated image</returns>
            <response code="200">Featured image set successfully</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Clinic or image not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.ReorderImages(System.Guid,System.Collections.Generic.Dictionary{System.Guid,System.Int32})">
            <summary>
            Reorder clinic images (Admin Only)
            </summary>
            <param name="id">Clinic ID</param>
            <param name="imageOrders">Dictionary of image ID to display order</param>
            <returns>List of reordered images</returns>
            <response code="200">Images reordered successfully</response>
            <response code="400">Invalid request data</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Clinic not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.TestUploadImages(System.Guid,SingleClin.API.DTOs.Clinic.MultipleImageUploadDto)">
            <summary>
            TEST ENDPOINT: Upload images without authentication (Development Only)
            </summary>
            <param name="id">Clinic ID</param>
            <param name="uploadDto">Multiple images upload data</param>
            <returns>Upload response with results</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.TestImageUrl(System.String)">
            <summary>
            Test image URL accessibility
            </summary>
            <param name="imageUrl">Image URL to test</param>
            <returns>Status of the image URL</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.GetImageUrl(System.String)">
            <summary>
            Get fresh SAS URL for an image
            </summary>
            <param name="fileName">Storage file name</param>
            <returns>Fresh SAS URL</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.MigrateImageUrls(SingleClin.API.Services.ImageMigrationService)">
            <summary>
            Migrate all image URLs to use SAS tokens (Development/Admin only)
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.GetServices(System.Guid)">
            <summary>
            Get services for a specific clinic
            </summary>
            <param name="id">Clinic ID</param>
            <returns>List of services offered by the clinic</returns>
            <response code="200">Returns the clinic services</response>
            <response code="404">Clinic not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ClinicController.CreateSampleServices(System.Guid)">
            <summary>
            Create sample services for a clinic (Development Only)
            </summary>
            <param name="id">Clinic ID</param>
            <returns>Created services</returns>
        </member>
        <member name="T:SingleClin.API.Controllers.HealthController">
            <summary>
            Health check endpoints documentation
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.HealthController.GetHealthCheckInfo">
            <summary>
            Get information about available health check endpoints
            </summary>
            <response code="200">Returns information about health check endpoints</response>
        </member>
        <member name="M:SingleClin.API.Controllers.HealthController.TestCors">
            <summary>
            Test CORS configuration
            </summary>
            <response code="200">Returns CORS test response with headers information</response>
        </member>
        <member name="M:SingleClin.API.Controllers.JobsController.TriggerBalanceCheckJob">
            <summary>
            Manually trigger balance check job (Admin only)
            </summary>
            <returns>Job execution result</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.JobsController.ExecuteBalanceCheckJob">
            <summary>
            Execute balance check job synchronously for testing (Admin only)
            </summary>
            <returns>Job execution result with statistics</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.JobsController.GetBalanceCheckJobStats">
            <summary>
            Get balance check job statistics (Admin only)
            </summary>
            <returns>Job statistics</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.JobsController.UpdateBalanceCheckJobSchedule(System.String)">
            <summary>
            Update balance check job schedule (Admin only)
            </summary>
            <param name="cronExpression">New cron expression for job scheduling</param>
            <returns>Update result</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.JobsController.DisableBalanceCheckJob">
            <summary>
            Disable balance check job (Admin only)
            </summary>
            <returns>Disable result</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.JobsController.EnableBalanceCheckJob">
            <summary>
            Re-enable balance check job with default schedule (Admin only)
            </summary>
            <returns>Enable result</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.NotificationPreferencesController.GetPreferences">
            <summary>
            Get current user's notification preferences
            </summary>
            <returns>User's notification preferences</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.NotificationPreferencesController.GetUserPreferences(System.Guid)">
            <summary>
            Get notification preferences for a specific user (Admin only)
            </summary>
            <param name="userId">User ID</param>
            <returns>User's notification preferences</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.NotificationPreferencesController.UpdatePreferences(SingleClin.API.DTOs.NotificationPreferences.NotificationPreferencesDto)">
            <summary>
            Update current user's notification preferences
            </summary>
            <param name="preferences">Updated notification preferences</param>
            <returns>Updated notification preferences</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.NotificationPreferencesController.UpdateUserPreferences(System.Guid,SingleClin.API.DTOs.NotificationPreferences.NotificationPreferencesDto)">
            <summary>
            Update notification preferences for a specific user (Admin only)
            </summary>
            <param name="userId">User ID</param>
            <param name="preferences">Updated notification preferences</param>
            <returns>Updated notification preferences</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.NotificationPreferencesController.UpdateDeviceToken(SingleClin.API.DTOs.NotificationPreferences.UpdateDeviceTokenDto)">
            <summary>
            Update device token for push notifications
            </summary>
            <param name="deviceTokenDto">Device token and platform information</param>
            <returns>Success confirmation</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.NotificationPreferencesController.UpdateUserDeviceToken(System.Guid,SingleClin.API.DTOs.NotificationPreferences.UpdateDeviceTokenDto)">
            <summary>
            Update device token for a specific user (Admin only)
            </summary>
            <param name="userId">User ID</param>
            <param name="deviceTokenDto">Device token and platform information</param>
            <returns>Success confirmation</returns>
        </member>
        <member name="T:SingleClin.API.Controllers.PlanController">
            <summary>
            Controller for managing subscription plans (Admin Only)
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.PlanController.GetAll(SingleClin.API.DTOs.Plan.PlanFilterDto)">
            <summary>
            Get all plans with pagination and filtering
            </summary>
            <param name="filter">Filter criteria including pagination, search, price range, credits range, featured status, and sorting</param>
            <returns>Paginated list of plans</returns>
            <response code="200">Returns the paginated list of plans</response>
            <response code="400">Invalid filter parameters</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <example>
            GET /api/plan?pageNumber=1&amp;pageSize=10&amp;isActive=true&amp;searchTerm=premium&amp;minPrice=50&amp;maxPrice=200&amp;isFeatured=true&amp;sortBy=price&amp;sortDirection=desc
            </example>
        </member>
        <member name="M:SingleClin.API.Controllers.PlanController.GetActive">
            <summary>
            Get active plans (no admin authorization required)
            </summary>
            <returns>List of active plans</returns>
            <response code="200">Returns list of active plans</response>
        </member>
        <member name="M:SingleClin.API.Controllers.PlanController.GetById(System.Guid)">
            <summary>
            Get plan by ID
            </summary>
            <param name="id">Plan ID</param>
            <returns>Plan details</returns>
            <response code="200">Returns the plan</response>
            <response code="400">Invalid plan ID format</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Plan not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.PlanController.Create(SingleClin.API.DTOs.Plan.PlanRequestDto)">
            <summary>
            Create a new plan
            </summary>
            <param name="planRequest">Plan creation data with validation rules</param>
            <returns>Created plan</returns>
            <response code="201">Plan created successfully</response>
            <response code="400">Invalid plan data or validation errors</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="409">Plan name already exists</response>
            <example>
            POST /api/plan
            {
              "name": "Premium Plan",
              "description": "Premium subscription with enhanced features",
              "credits": 1000,
              "price": 99.99,
              "originalPrice": 149.99,
              "validityDays": 365,
              "isActive": true,
              "displayOrder": 1,
              "isFeatured": true
            }
            </example>
        </member>
        <member name="M:SingleClin.API.Controllers.PlanController.Update(System.Guid,SingleClin.API.DTOs.Plan.PlanRequestDto)">
            <summary>
            Update an existing plan
            </summary>
            <param name="id">Plan ID</param>
            <param name="planRequest">Updated plan data</param>
            <returns>Updated plan</returns>
            <response code="200">Plan updated successfully</response>
            <response code="400">Invalid plan data or validation errors</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Plan not found</response>
            <response code="409">Plan name already exists</response>
        </member>
        <member name="M:SingleClin.API.Controllers.PlanController.Delete(System.Guid)">
            <summary>
            Delete a plan
            </summary>
            <param name="id">Plan ID</param>
            <returns>Success confirmation</returns>
            <response code="204">Plan deleted successfully</response>
            <response code="400">Invalid plan ID format</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
            <response code="404">Plan not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.PlanController.GetStatistics">
            <summary>
            Get plan statistics
            </summary>
            <returns>Plan statistics</returns>
            <response code="200">Returns plan statistics</response>
            <response code="401">Unauthorized</response>
            <response code="403">Forbidden - Admin role required</response>
        </member>
        <member name="T:SingleClin.API.Controllers.QRCodeController">
            <summary>
            Controller for QR Code generation and validation
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.QRCodeController.GenerateQRCode(SingleClin.API.DTOs.QRCode.QRCodeGenerateRequestDto)">
            <summary>
            Generate a new QR Code for the authenticated user
            </summary>
            <param name="request">QR Code generation parameters</param>
            <returns>QR Code data with embedded JWT token</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.QRCodeController.ValidateQRCode(System.String)">
            <summary>
            Validate a QR Code token (for clinic use)
            </summary>
            <param name="token">JWT token from QR Code</param>
            <returns>Token validation result with user plan information</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.QRCodeController.GetMetrics">
            <summary>
            Get QR Code generation metrics (admin only)
            </summary>
            <returns>QR Code generation statistics</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.QRCodeController.CheckRateLimit(System.String)">
            <summary>
            Check rate limiting for QR Code generation
            </summary>
        </member>
        <member name="T:SingleClin.API.Controllers.ReportsController">
            <summary>
            Controller for generating and exporting reports
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.ReportsController.GetAvailableReportTypes">
            <summary>
            Get available report types for the current user
            </summary>
            <returns>List of available report types</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.ReportsController.GenerateReport(SingleClin.API.DTOs.Report.ReportRequest)">
            <summary>
            Generate a report
            </summary>
            <param name="request">Report request parameters</param>
            <returns>Generated report data</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.ReportsController.GenerateUsageReport(SingleClin.API.DTOs.Report.ReportRequest)">
            <summary>
            Generate usage by period report
            </summary>
            <param name="request">Report request parameters</param>
            <returns>Usage report data</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.ReportsController.GenerateClinicRankingReport(SingleClin.API.DTOs.Report.ReportRequest)">
            <summary>
            Generate clinic ranking report
            </summary>
            <param name="request">Report request parameters</param>
            <returns>Clinic ranking data</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.ReportsController.ExportReport(SingleClin.API.DTOs.Export.ExportRequest)">
            <summary>
            Export a report to specified format
            </summary>
            <param name="request">Export request with report parameters and format</param>
            <returns>File download</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.ReportsController.ExportMultipleReports(SingleClin.API.DTOs.Export.MultipleExportRequest)">
            <summary>
            Export multiple reports to a single Excel file
            </summary>
            <param name="request">Export request with report types</param>
            <returns>Excel file with multiple sheets</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.ReportsController.ClearCache(System.Nullable{SingleClin.API.DTOs.Report.ReportType})">
            <summary>
            Clear report cache
            </summary>
            <param name="reportType">Optional report type to clear</param>
            <returns>Success response</returns>
        </member>
        <member name="T:SingleClin.API.Controllers.ServicesController">
            <summary>
            Controller for managing services
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.ServicesController.GetServicesByClinic(System.Guid)">
            <summary>
            Get all services for a clinic
            </summary>
            <param name="clinicId">Clinic ID</param>
            <returns>List of services for the clinic</returns>
            <response code="200">Returns the list of services</response>
            <response code="400">Invalid clinic ID</response>
            <response code="401">Unauthorized</response>
            <response code="404">Clinic not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ServicesController.GetServiceById(System.Guid)">
            <summary>
            Get service details by ID
            </summary>
            <param name="serviceId">Service ID</param>
            <returns>Service details</returns>
            <response code="200">Returns the service details</response>
            <response code="400">Invalid service ID</response>
            <response code="401">Unauthorized</response>
            <response code="404">Service not found</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ServicesController.SearchServices(System.String,System.String,System.Nullable{System.Guid},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Search services across all clinics
            </summary>
            <param name="query">Search query</param>
            <param name="category">Service category filter</param>
            <param name="clinicId">Clinic ID filter (optional)</param>
            <param name="minCreditCost">Minimum credit cost filter</param>
            <param name="maxCreditCost">Maximum credit cost filter</param>
            <param name="page">Page number (default: 1)</param>
            <param name="limit">Items per page (default: 20, max: 100)</param>
            <returns>Paginated list of services matching the search criteria</returns>
            <response code="200">Returns the paginated list of services</response>
            <response code="400">Invalid search parameters</response>
            <response code="401">Unauthorized</response>
        </member>
        <member name="M:SingleClin.API.Controllers.ServicesController.GetServiceCategories">
            <summary>
            Get service categories
            </summary>
            <returns>List of available service categories</returns>
            <response code="200">Returns the list of service categories</response>
            <response code="401">Unauthorized</response>
        </member>
        <member name="T:SingleClin.API.Controllers.TestAuthController">
            <summary>
            Test controller to demonstrate authorization attributes
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.PublicEndpoint">
            <summary>
            Public endpoint - no authentication required
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.AuthenticatedEndpoint">
            <summary>
            Requires any authenticated user
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.AdminOnlyEndpoint">
            <summary>
            Admin only endpoint
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.ClinicOnlyEndpoint">
            <summary>
            Clinic users only endpoint (Origin or Partner)
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.PatientOnlyEndpoint">
            <summary>
            Patient only endpoint
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.AdminOrClinicEndpoint">
            <summary>
            Multiple roles allowed (Admin or Clinic)
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.GetClinicDetails(System.Guid)">
            <summary>
            Clinic-specific resource - only accessible by the clinic owner
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.GetClinicAdminAccess(System.Guid)">
            <summary>
            Clinic resource accessible by admin or clinic owner
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestAuthController.CheckClaims">
            <summary>
            Example of using authorization in action - check claims programmatically
            </summary>
        </member>
        <member name="T:SingleClin.API.Controllers.TestResponseController">
            <summary>
            Test controller to demonstrate BaseController and ResponseWrapper functionality
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.GetSuccessWithData">
            <summary>
            Test successful response with data
            </summary>
            <response code="200">Returns the test data wrapped in a successful response</response>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.GetSuccessNoData">
            <summary>
            Test successful response without data
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.CreateItem(SingleClin.API.Controllers.CreateItemRequest)">
            <summary>
            Test created response
            </summary>
            <param name="request">The item creation request</param>
            <response code="201">Returns the created item</response>
            <response code="422">If the request validation fails</response>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.TestValidationError">
            <summary>
            Test validation error response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.GetNotFound(System.Int32)">
            <summary>
            Test not found response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.GetUserInfo">
            <summary>
            Test unauthorized response (requires authentication)
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.AdminOnlyAction">
            <summary>
            Test forbidden response
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.ThrowException">
            <summary>
            Test exception handling
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TestResponseController.TestConflict">
            <summary>
            Test conflict response
            </summary>
        </member>
        <member name="T:SingleClin.API.Controllers.CreateItemRequest">
            <summary>
            Request model for creating a test item
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.CreateItemRequest.Name">
            <summary>
            The name of the item (required)
            </summary>
            <example>Test Item 1</example>
        </member>
        <member name="P:SingleClin.API.Controllers.CreateItemRequest.Description">
            <summary>
            Optional description of the item
            </summary>
            <example>This is a test item description</example>
        </member>
        <member name="T:SingleClin.API.Controllers.TransactionController">
            <summary>
            Controller for transaction management and QR Code validation
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.TransactionController.ValidateQRCode(SingleClin.API.DTOs.QRCode.QRCodeValidateRequestDto)">
            <summary>
            Validate QR Code and process transaction (clinic use)
            </summary>
            <param name="request">QR Code validation request</param>
            <returns>Validation result with patient and transaction information</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.TransactionController.ParseQRCode(System.String)">
            <summary>
            Parse QR Code token without processing transaction (preview)
            </summary>
            <param name="qrToken">QR Code token to parse</param>
            <returns>Token information for preview</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.TransactionController.GetClinicTransactions(System.Int32,System.Int32)">
            <summary>
            Get transactions for the authenticated clinic
            </summary>
            <param name="page">Page number (default: 1)</param>
            <param name="pageSize">Page size (default: 20, max: 100)</param>
            <returns>Paginated list of transactions</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.TransactionController.GetTransactions(SingleClin.API.DTOs.Transaction.TransactionFilterDto)">
            <summary>
            Get paginated list of all transactions (admin only)
            </summary>
            <param name="filter">Filter parameters</param>
            <returns>Paginated list of transactions</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.TransactionController.GetTransaction(System.Guid)">
            <summary>
            Get transaction by ID (admin only)
            </summary>
            <param name="id">Transaction ID</param>
            <returns>Transaction details</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.TransactionController.UpdateTransaction(System.Guid,SingleClin.API.DTOs.Transaction.TransactionUpdateDto)">
            <summary>
            Update transaction details (admin only)
            </summary>
            <param name="id">Transaction ID</param>
            <param name="request">Update request</param>
            <returns>Updated transaction</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.TransactionController.CancelTransaction(System.Guid,SingleClin.API.DTOs.Transaction.TransactionCancelDto)">
            <summary>
            Cancel transaction and refund credits (admin only)
            </summary>
            <param name="id">Transaction ID</param>
            <param name="request">Cancellation request</param>
            <returns>Cancelled transaction</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.TransactionController.GetDashboardMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get dashboard metrics for transactions (admin only)
            </summary>
            <param name="startDate">Start date for metrics calculation (optional)</param>
            <param name="endDate">End date for metrics calculation (optional)</param>
            <returns>Dashboard metrics</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.TransactionController.ExportTransactions(SingleClin.API.DTOs.Transaction.TransactionFilterDto,System.String)">
            <summary>
            Export transactions to various formats (admin only)
            </summary>
            <param name="filter">Filter parameters</param>
            <param name="format">Export format (excel, csv, pdf)</param>
            <returns>File download</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.TransactionController.GetAuthenticatedClinicId">
            <summary>
            Get authenticated clinic ID from JWT claims
            </summary>
            <returns>Clinic ID if found, empty GUID otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.TransactionController.GetAuthenticatedUserId">
            <summary>
            Get authenticated user ID from JWT claims
            </summary>
            <returns>User ID if found, empty GUID otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Controllers.UserController.GetUsers(SingleClin.API.DTOs.User.UserFilterDto)">
            <summary>
            Get paginated list of users with filtering and sorting
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.UserController.GetUser(System.Guid)">
            <summary>
            Get user by ID
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.UserController.CreateUser(SingleClin.API.DTOs.User.CreateUserDto)">
            <summary>
            Create new user
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.UserController.UpdateUser(System.Guid,SingleClin.API.DTOs.User.UpdateUserDto)">
            <summary>
            Update user
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.UserController.DeleteUser(System.Guid)">
            <summary>
            Delete user
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.UserController.ResetPassword(System.Guid)">
            <summary>
            Reset user password
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.UserController.ToggleStatus(System.Guid,SingleClin.API.DTOs.User.ToggleStatusDto)">
            <summary>
            Toggle user active status
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.UserController.PurchasePlan(System.Guid,SingleClin.API.DTOs.Plan.PurchasePlanDto)">
            <summary>
            Purchase a plan for a user
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.UserController.GetUserPlans(System.Guid)">
            <summary>
            Get user's active plans
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.UserController.GetUserPlan(System.Guid,System.Guid)">
            <summary>
            Get specific user plan by ID
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.UserController.GetUserCredits(System.String)">
            <summary>
            Get user's total available credits
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.UserController.ConsumeCredits(System.String,SingleClin.API.Controllers.ConsumeCreditsRequest)">
            <summary>
            Consume credits for a service (mock endpoint for testing)
            </summary>
        </member>
        <member name="M:SingleClin.API.Controllers.UserController.CancelUserPlan(System.Guid,System.Guid,SingleClin.API.Controllers.CancelPlanRequest)">
            <summary>
            Cancel/Remove a user's plan
            </summary>
        </member>
        <member name="T:SingleClin.API.Controllers.CancelPlanRequest">
            <summary>
            Request model for cancelling a user plan
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.CancelPlanRequest.Reason">
            <summary>
            Reason for cancelling the plan
            </summary>
        </member>
        <member name="T:SingleClin.API.Controllers.ConsumeCreditsRequest">
            <summary>
            Request model for consuming credits
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.ConsumeCreditsRequest.ServiceId">
            <summary>
            ID of the service being booked
            </summary>
        </member>
        <member name="P:SingleClin.API.Controllers.ConsumeCreditsRequest.Amount">
            <summary>
            Amount of credits to consume
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.AppDbContext">
            <summary>
            Main database context for the SingleClin application
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.AppDbContext.Users">
            <summary>
            Users in the system (separate from ApplicationUser Identity)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.AppDbContext.Plans">
            <summary>
            Available plans for purchase
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.AppDbContext.UserPlans">
            <summary>
            User purchased plans
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.AppDbContext.Transactions">
            <summary>
            Transactions (credit usage)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.AppDbContext.Clinics">
            <summary>
            Clinics in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.AppDbContext.ClinicImages">
            <summary>
            Clinic images
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.AppDbContext.Services">
            <summary>
            Services offered by clinics
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.AppDbContext.Appointments">
            <summary>
            Appointments scheduled by users
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.ApplicationDbContext">
            <summary>
            Main database context for the SingleClin application with Identity support
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.ApplicationDbContext.Clinics">
            <summary>
            Clinics registered in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.ApplicationDbContext.ClinicImages">
            <summary>
            Images associated with clinics
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.ApplicationDbContext.ClinicServices">
            <summary>
            Services offered by clinics
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.ApplicationDbContext.Plans">
            <summary>
            Available plans for purchase
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.ApplicationDbContext.UserPlans">
            <summary>
            User purchased plans
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.ApplicationDbContext.Transactions">
            <summary>
            Transactions (credit usage)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.ApplicationDbContext.RefreshTokens">
            <summary>
            Refresh tokens for JWT authentication
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.ApplicationDbContext.NotificationLogs">
            <summary>
            Notification logs
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.ApplicationDbContext.UserNotificationPreferences">
            <summary>
            User notification preferences
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.ApplicationDbContext.Appointments">
            <summary>
            Appointments made by users for services at clinics
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Configurations.ApplicationUserConfiguration">
            <summary>
            Entity configuration for ApplicationUser
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Configurations.BaseEntityConfiguration`1">
            <summary>
            Base configuration for entities that implement IEntity
            </summary>
        </member>
        <member name="M:SingleClin.API.Data.Configurations.BaseEntityConfiguration`1.ConfigureEntity(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            Override this method to add entity-specific configurations
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Configurations.ClinicImageConfiguration">
            <summary>
            Entity Framework configuration for ClinicImage entity
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Configurations.RefreshTokenConfiguration">
            <summary>
            Entity configuration for RefreshToken
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.DatabaseSeeder">
            <summary>
            Seed initial data for the database
            </summary>
        </member>
        <member name="M:SingleClin.API.Data.DatabaseSeeder.SeedAsync">
            <summary>
            Seed all initial data
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.DesignTimeDbContextFactory">
            <summary>
            Design-time factory for EF Core migrations
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Enums.UserRole">
            <summary>
            User roles in the system
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Enums.UserRole.Patient">
            <summary>
            Patient user who can use credits and generate QR codes
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Enums.UserRole.ClinicOrigin">
            <summary>
            Origin clinic that provides services and validates QR codes
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Enums.UserRole.ClinicPartner">
            <summary>
            Partner clinic that can validate QR codes but not provide services
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Enums.UserRole.Administrator">
            <summary>
            System administrator with full access
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Interceptors.AuditingInterceptor">
            <summary>
            Interceptor for logging database operations in development
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.ApplicationUser">
            <summary>
            Extended user class for ASP.NET Core Identity
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.Role">
            <summary>
            User's role in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.ClinicId">
            <summary>
            Associated clinic ID (for clinic users only)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.Clinic">
            <summary>
            Navigation property to the associated clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.FullName">
            <summary>
            User's full name
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.IsActive">
            <summary>
            Whether the user account is active
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.CreatedAt">
            <summary>
            Date when the user was created
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.UpdatedAt">
            <summary>
            Date when the user was last updated
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.LastLoginAt">
            <summary>
            Date when the user last logged in
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.FirebaseUid">
            <summary>
            Firebase UID for users authenticated via Firebase
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.RefreshTokens">
            <summary>
            Refresh tokens for JWT authentication
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ApplicationUser.UserPlans">
            <summary>
            User plans (for patients)
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.Appointment">
            <summary>
            Represents an appointment between a user and a service at a clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Appointment.UserId">
            <summary>
            User who made the appointment
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Appointment.ServiceId">
            <summary>
            Service being booked
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Appointment.ClinicId">
            <summary>
            Clinic where the service will be provided
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Appointment.ScheduledDate">
            <summary>
            Scheduled date and time for the appointment
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Appointment.Status">
            <summary>
            Current status of the appointment
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Appointment.TransactionId">
            <summary>
            Associated transaction ID when credits are debited
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Appointment.TotalCredits">
            <summary>
            Total credits required for this appointment
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Appointment.ConfirmationToken">
            <summary>
            Unique token for appointment confirmation
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Appointment.User">
            <summary>
            Navigation property to the user
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Appointment.Service">
            <summary>
            Navigation property to the service
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Appointment.Clinic">
            <summary>
            Navigation property to the clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Appointment.Transaction">
            <summary>
            Navigation property to the transaction
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.BaseEntity">
            <summary>
            Base entity class that implements IEntity
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.BaseEntity.Id">
            <summary>
            Unique identifier for the entity
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.BaseEntity.CreatedAt">
            <summary>
            Date and time when the entity was created
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.BaseEntity.UpdatedAt">
            <summary>
            Date and time when the entity was last updated
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.Clinic">
            <summary>
            Represents a clinic in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Name">
            <summary>
            Clinic name
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Type">
            <summary>
            Type of clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Address">
            <summary>
            Clinic address
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.PhoneNumber">
            <summary>
            Clinic phone number
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Email">
            <summary>
            Clinic email
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Cnpj">
            <summary>
            Clinic CNPJ (Brazilian company registration)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.IsActive">
            <summary>
            Indicates if the clinic is active
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Latitude">
            <summary>
            Latitude coordinate
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Longitude">
            <summary>
            Longitude coordinate
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.ImageUrl">
            <summary>
            URL da imagem/logo da clínica (DEPRECATED - use Images collection)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.ImageFileName">
            <summary>
            Nome do arquivo da imagem no storage (DEPRECATED - use Images collection)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.ImageSize">
            <summary>
            Tamanho da imagem em bytes (DEPRECATED - use Images collection)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.ImageContentType">
            <summary>
            Tipo MIME da imagem (DEPRECATED - use Images collection)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Images">
            <summary>
            Collection of images associated with this clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Services">
            <summary>
            Services offered by this clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Clinic.Transactions">
            <summary>
            Transactions processed by this clinic
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.ClinicImage">
            <summary>
            Represents an image associated with a clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ClinicImage.ClinicId">
            <summary>
            ID of the clinic this image belongs to
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ClinicImage.Clinic">
            <summary>
            Navigation property to the clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ClinicImage.ImageUrl">
            <summary>
            URL of the image in Azure Blob Storage
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ClinicImage.FileName">
            <summary>
            Original file name of the image
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ClinicImage.StorageFileName">
            <summary>
            File name used in storage (with unique identifier)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ClinicImage.Size">
            <summary>
            Size of the image file in bytes
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ClinicImage.ContentType">
            <summary>
            MIME type of the image (e.g., image/jpeg)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ClinicImage.AltText">
            <summary>
            Alternative text for accessibility
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ClinicImage.Description">
            <summary>
            Description of the image
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ClinicImage.DisplayOrder">
            <summary>
            Display order for sorting images (0 = first)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ClinicImage.IsFeatured">
            <summary>
            Whether this is the featured/primary image
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ClinicImage.Width">
            <summary>
            Width of the image in pixels
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.ClinicImage.Height">
            <summary>
            Height of the image in pixels
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.Enums.AppointmentStatus">
            <summary>
            Represents the status of an appointment
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.AppointmentStatus.Scheduled">
            <summary>
            Appointment has been scheduled but not confirmed
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.AppointmentStatus.Confirmed">
            <summary>
            Appointment has been confirmed and credits debited
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.AppointmentStatus.Completed">
            <summary>
            Appointment has been completed
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.AppointmentStatus.Cancelled">
            <summary>
            Appointment has been cancelled
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.Enums.ClinicType">
            <summary>
            Types of clinics in the system
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.ClinicType.Regular">
            <summary>
            Regular clinic
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.ClinicType.Origin">
            <summary>
            Origin clinic - provides services
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.ClinicType.Partner">
            <summary>
            Partner clinic - has special agreements
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.ClinicType.Administrative">
            <summary>
            Administrative clinic
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.Enums.TransactionStatus">
            <summary>
            Status of a transaction
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.TransactionStatus.Pending">
            <summary>
            Transaction is pending validation
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.TransactionStatus.Validated">
            <summary>
            Transaction was validated successfully
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.TransactionStatus.Cancelled">
            <summary>
            Transaction was cancelled
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.TransactionStatus.Expired">
            <summary>
            Transaction expired before validation
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.Enums.UserRole">
            <summary>
            User roles in the system
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.UserRole.Patient">
            <summary>
            Patient user - can purchase and use plans
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.UserRole.Clinic">
            <summary>
            Clinic user - can validate QR codes
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.UserRole.ClinicOrigin">
            <summary>
            Clinic origin - special clinic type
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.UserRole.ClinicPartner">
            <summary>
            Clinic partner - partner clinic type
            </summary>
        </member>
        <member name="F:SingleClin.API.Data.Models.Enums.UserRole.Admin">
            <summary>
            System administrator
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.IEntity">
            <summary>
            Base interface for all entities in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.IEntity.Id">
            <summary>
            Unique identifier for the entity
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.IEntity.CreatedAt">
            <summary>
            Date and time when the entity was created
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.IEntity.UpdatedAt">
            <summary>
            Date and time when the entity was last updated
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.Plan">
            <summary>
            Represents a plan that users can purchase
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.Name">
            <summary>
            Plan name
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.Description">
            <summary>
            Plan description
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.Credits">
            <summary>
            Number of credits included in the plan
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.Price">
            <summary>
            Plan price
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.OriginalPrice">
            <summary>
            Original price (for showing discounts)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.ValidityDays">
            <summary>
            Validity period in days
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.IsActive">
            <summary>
            Indicates if the plan is active for purchase
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.DisplayOrder">
            <summary>
            Display order
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.IsFeatured">
            <summary>
            Indicates if this is a featured plan
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Plan.UserPlans">
            <summary>
            User plans purchased from this plan
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.RefreshToken">
            <summary>
            Refresh token for JWT authentication
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.Token">
            <summary>
            The token value
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.UserId">
            <summary>
            User ID this token belongs to
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.User">
            <summary>
            Navigation property to the user
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.ExpiresAt">
            <summary>
            When the token expires
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.IsRevoked">
            <summary>
            Whether the token has been revoked
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.RevokedAt">
            <summary>
            When the token was revoked
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.DeviceInfo">
            <summary>
            Device information for the token
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.IpAddress">
            <summary>
            IP address from which the token was created
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.RefreshToken.IsActive">
            <summary>
            Check if the token is active
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.Service">
            <summary>
            Represents a service offered by a clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Service.Name">
            <summary>
            Service name
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Service.Description">
            <summary>
            Service description
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Service.Price">
            <summary>
            Service price
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Service.CreditCost">
            <summary>
            Cost in credits for this service
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Service.Duration">
            <summary>
            Service duration in minutes
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Service.Category">
            <summary>
            Service category
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Service.IsActive">
            <summary>
            Indicates if the service is active
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Service.ImageUrl">
            <summary>
            Service image URL
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Service.ClinicId">
            <summary>
            Clinic ID that offers this service
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Service.Clinic">
            <summary>
            Navigation property to the clinic
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.Transaction">
            <summary>
            Represents a transaction (credit usage) in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.Code">
            <summary>
            Unique transaction code
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.UserPlanId">
            <summary>
            User plan used for this transaction
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.UserPlan">
            <summary>
            Navigation property to UserPlan
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.ClinicId">
            <summary>
            Clinic where the transaction occurred
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.Clinic">
            <summary>
            Navigation property to Clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.Status">
            <summary>
            Transaction status
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.CreditsUsed">
            <summary>
            Number of credits used
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.ServiceDescription">
            <summary>
            Service or procedure description
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.ValidationDate">
            <summary>
            Date when the transaction was validated
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.ValidatedBy">
            <summary>
            User who validated the transaction (clinic staff)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.ValidationNotes">
            <summary>
            Validation notes
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.IpAddress">
            <summary>
            IP address from where the transaction was created
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.UserAgent">
            <summary>
            User agent of the device that created the transaction
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.Latitude">
            <summary>
            Latitude where the transaction occurred
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.Longitude">
            <summary>
            Longitude where the transaction occurred
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.CancellationReason">
            <summary>
            Cancellation reason if cancelled
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.CancellationDate">
            <summary>
            Date when the transaction was cancelled
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.QRToken">
            <summary>
            QR Code token used for this transaction (if applicable)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.QRNonce">
            <summary>
            QR Code nonce for security verification
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.ServiceType">
            <summary>
            Service type from QR Code validation
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.Transaction.Amount">
            <summary>
            Amount charged for this transaction
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.User">
            <summary>
            Represents a user in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.ApplicationUserId">
            <summary>
            Reference to ApplicationUser ID from Identity system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.Email">
            <summary>
            User's email address (unique)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.FullName">
            <summary>
            User's full name
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.Role">
            <summary>
            User's role in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.FirstName">
            <summary>
            User's first name
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.LastName">
            <summary>
            User's last name
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.DisplayName">
            <summary>
            User's display name
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.PhoneNumber">
            <summary>
            User's phone number
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.FirebaseUid">
            <summary>
            Firebase UID for authentication
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.IsActive">
            <summary>
            Indicates if the user account is active
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.User.UserPlans">
            <summary>
            User's purchased plans
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserNotificationPreferences.EnablePush">
            <summary>
            Whether the user wants to receive push notifications
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserNotificationPreferences.EnableEmail">
            <summary>
            Whether the user wants to receive email notifications
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserNotificationPreferences.LowBalanceThreshold">
            <summary>
            Threshold for low balance notifications (in credits remaining)
            Valid range: 1-5 credits
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserNotificationPreferences.PreferredLanguage">
            <summary>
            Preferred language for notifications (ISO 639-1 code)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserNotificationPreferences.EnablePromotional">
            <summary>
            Whether to receive promotional notifications
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserNotificationPreferences.EnablePayment">
            <summary>
            Whether to receive payment-related notifications
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserNotificationPreferences.QuietHoursStart">
            <summary>
            Custom quiet hours start time (24-hour format, e.g., "22:00")
            If null, uses system default
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserNotificationPreferences.QuietHoursEnd">
            <summary>
            Custom quiet hours end time (24-hour format, e.g., "08:00")
            If null, uses system default
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserNotificationPreferences.DeviceToken">
            <summary>
            Device token for push notifications (FCM token)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserNotificationPreferences.DevicePlatform">
            <summary>
            Device platform (iOS, Android, Web)
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Models.UserPlan">
            <summary>
            Represents a plan purchased by a user
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.UserId">
            <summary>
            User who purchased the plan
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.User">
            <summary>
            Navigation property to User
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.PlanId">
            <summary>
            Plan that was purchased
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.Plan">
            <summary>
            Navigation property to Plan
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.Credits">
            <summary>
            Number of credits purchased
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.CreditsRemaining">
            <summary>
            Number of credits remaining
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.AmountPaid">
            <summary>
            Amount paid for the plan
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.ExpirationDate">
            <summary>
            Date when the plan expires
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.IsActive">
            <summary>
            Indicates if the plan is currently active
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.PaymentMethod">
            <summary>
            Payment method used
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.PaymentTransactionId">
            <summary>
            Payment transaction ID from payment provider
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.Notes">
            <summary>
            Notes about the purchase
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.Transactions">
            <summary>
            Transactions made using this plan
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.CreditsUsed">
            <summary>
            Gets the number of credits used
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.ExpiresAt">
            <summary>
            Gets the expiration date (alias for ExpirationDate)
            </summary>
        </member>
        <member name="P:SingleClin.API.Data.Models.UserPlan.IsExpired">
            <summary>
            Checks if the plan is expired
            </summary>
        </member>
        <member name="T:SingleClin.API.Data.Seeders.RoleSeeder">
            <summary>
            Seeder for creating default roles in the system
            </summary>
        </member>
        <member name="M:SingleClin.API.Data.Seeders.RoleSeeder.SeedRolesAsync(System.IServiceProvider)">
            <summary>
            Seeds the default roles into the database
            </summary>
        </member>
        <member name="M:SingleClin.API.Data.Seeders.RoleSeeder.SeedDefaultAdminAsync(System.IServiceProvider)">
            <summary>
            Seeds default admin user if it doesn't exist
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Appointment.AppointmentConfirmationDto">
            <summary>
            Data transfer object for confirming an appointment
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentConfirmationDto.ConfirmationToken">
            <summary>
            Unique confirmation token for the appointment
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Appointment.AppointmentResponseDto">
            <summary>
            Data transfer object for appointment response
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentResponseDto.Id">
            <summary>
            Appointment unique identifier
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentResponseDto.UserId">
            <summary>
            User ID who made the appointment
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentResponseDto.Service">
            <summary>
            Service details
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentResponseDto.ScheduledDate">
            <summary>
            Scheduled date and time
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentResponseDto.Status">
            <summary>
            Appointment status
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentResponseDto.TotalCredits">
            <summary>
            Total credits for this appointment
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentResponseDto.TransactionId">
            <summary>
            Transaction ID if appointment is confirmed
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentResponseDto.ConfirmationToken">
            <summary>
            Confirmation token (only for scheduled appointments)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentResponseDto.CreatedAt">
            <summary>
            Appointment creation date
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentResponseDto.UpdatedAt">
            <summary>
            Last update date
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Appointment.AppointmentScheduleDto">
            <summary>
            Data transfer object for scheduling an appointment
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentScheduleDto.ServiceId">
            <summary>
            Service ID for the appointment
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentScheduleDto.ClinicId">
            <summary>
            Clinic ID where the service will be provided
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentScheduleDto.ScheduledDate">
            <summary>
            Scheduled date and time for the appointment
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Appointment.AppointmentSummaryDto">
            <summary>
            Data transfer object for appointment summary (used in confirmation screen)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentSummaryDto.Id">
            <summary>
            Appointment unique identifier
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentSummaryDto.Service">
            <summary>
            Service details
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentSummaryDto.Clinic">
            <summary>
            Clinic details
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentSummaryDto.ScheduledDate">
            <summary>
            Scheduled date and time
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentSummaryDto.TotalCredits">
            <summary>
            Total credits required for this appointment
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentSummaryDto.ConfirmationToken">
            <summary>
            Confirmation token for this appointment
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentSummaryDto.UserCurrentCredits">
            <summary>
            User's current available credits
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentSummaryDto.UserRemainingCredits">
            <summary>
            User's remaining credits after this appointment
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.AppointmentSummaryDto.Status">
            <summary>
            Current appointment status
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Appointment.ServiceDto">
            <summary>
            Data transfer object for service information in appointment context
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.ServiceDto.Id">
            <summary>
            Service unique identifier
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.ServiceDto.Name">
            <summary>
            Service name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.ServiceDto.Description">
            <summary>
            Service description
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.ServiceDto.CreditCost">
            <summary>
            Cost in credits for this service
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.ServiceDto.Duration">
            <summary>
            Service duration in minutes
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.ServiceDto.Category">
            <summary>
            Service category
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.ServiceDto.ImageUrl">
            <summary>
            Service image URL
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Appointment.ServiceDto.Clinic">
            <summary>
            Clinic information
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Auth.AuthResponseDto">
            <summary>
            Data transfer object for authentication response
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.AccessToken">
            <summary>
            JWT access token
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.RefreshToken">
            <summary>
            Refresh token for getting new access tokens
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.ExpiresIn">
            <summary>
            Access token expiration time in seconds
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.UserId">
            <summary>
            User's ID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.Email">
            <summary>
            User's email
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.FullName">
            <summary>
            User's full name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.Role">
            <summary>
            User's role
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.ClinicId">
            <summary>
            Associated clinic ID (for clinic users)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.IsFirstLogin">
            <summary>
            Indicates if this is the user's first login
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.AuthResponseDto.IsEmailVerified">
            <summary>
            Indicates if the user's email is verified
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Auth.FirebaseLoginDto">
            <summary>
            Data transfer object for Firebase authentication
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.FirebaseLoginDto.FirebaseToken">
            <summary>
            Firebase ID token obtained from Firebase Auth
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.FirebaseLoginDto.DeviceInfo">
            <summary>
            Device information for tracking
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.FirebaseLoginDto.RememberMe">
            <summary>
            Whether to remember the login (create long-lived refresh token)
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Auth.LoginDto">
            <summary>
            Data transfer object for user login
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.LoginDto.Email">
            <summary>
            User's email address
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.LoginDto.Password">
            <summary>
            User's password
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.LoginDto.RememberMe">
            <summary>
            Whether to remember the user (for longer refresh token expiration)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.LoginDto.DeviceInfo">
            <summary>
            Device information for tracking refresh tokens
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Auth.RefreshTokenDto">
            <summary>
            Data transfer object for refresh token request
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RefreshTokenDto.RefreshToken">
            <summary>
            The refresh token
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RefreshTokenDto.DeviceInfo">
            <summary>
            Device information for tracking refresh tokens
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Auth.RegisterDto">
            <summary>
            Data transfer object for user registration
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RegisterDto.Email">
            <summary>
            User's email address
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RegisterDto.Password">
            <summary>
            User's password
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RegisterDto.ConfirmPassword">
            <summary>
            Confirm password
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RegisterDto.FullName">
            <summary>
            User's full name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RegisterDto.Role">
            <summary>
            User's role in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.RegisterDto.ClinicName">
            <summary>
            Clinic name (required for clinic users)
            </summary>
        </member>
        <member name="M:SingleClin.API.DTOs.Auth.RegisterDto.IsValid">
            <summary>
            Validates if clinic name is required based on role
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Auth.SocialLoginDto">
            <summary>
            Data transfer object for social login
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.SocialLoginDto.IdToken">
            <summary>
            Firebase ID token from social provider
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.SocialLoginDto.Provider">
            <summary>
            Social provider (google, apple)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.SocialLoginDto.DeviceInfo">
            <summary>
            Device information for tracking refresh tokens
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.SocialLoginDto.FullName">
            <summary>
            User's full name (optional, used if not provided by social provider)
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Auth.SyncUserDto">
            <summary>
            Data transfer object for syncing Firebase user with backend
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.SyncUserDto.FirebaseUid">
            <summary>
            Firebase UID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.SyncUserDto.Email">
            <summary>
            User's email
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.SyncUserDto.DisplayName">
            <summary>
            User's display name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.SyncUserDto.PhotoUrl">
            <summary>
            User's photo URL
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Auth.SyncUserDto.IsEmailVerified">
            <summary>
            Whether the user's email is verified in Firebase
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Clinic.ClinicFilterDto">
            <summary>
            Data transfer object for filtering clinics
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicFilterDto.PageNumber">
            <summary>
            Page number (1-based)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicFilterDto.PageSize">
            <summary>
            Number of items per page
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicFilterDto.IsActive">
            <summary>
            Filter by active status
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicFilterDto.Type">
            <summary>
            Filter by clinic type
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicFilterDto.SearchTerm">
            <summary>
            Search term for name or address
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicFilterDto.City">
            <summary>
            Filter by city (part of address)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicFilterDto.State">
            <summary>
            Filter by state (part of address)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicFilterDto.SortBy">
            <summary>
            Sort field
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicFilterDto.SortDirection">
            <summary>
            Sort direction (asc or desc)
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Clinic.ClinicImageDto">
            <summary>
            Data transfer object for clinic image data
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageDto.Id">
            <summary>
            Image unique identifier
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageDto.ClinicId">
            <summary>
            ID of the clinic this image belongs to
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageDto.ImageUrl">
            <summary>
            URL of the image in Azure Blob Storage
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageDto.FileName">
            <summary>
            Original file name of the image
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageDto.StorageFileName">
            <summary>
            File name used in storage (with unique identifier)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageDto.Size">
            <summary>
            Size of the image file in bytes
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageDto.ContentType">
            <summary>
            MIME type of the image (e.g., image/jpeg)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageDto.AltText">
            <summary>
            Alternative text for accessibility
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageDto.Description">
            <summary>
            Description of the image
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageDto.DisplayOrder">
            <summary>
            Display order for sorting images (0 = first)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageDto.IsFeatured">
            <summary>
            Whether this is the featured/primary image
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageDto.Width">
            <summary>
            Width of the image in pixels
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageDto.Height">
            <summary>
            Height of the image in pixels
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageDto.CreatedAt">
            <summary>
            When the image was created
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageDto.UpdatedAt">
            <summary>
            When the image was last updated
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Clinic.ClinicImageUploadDto">
            <summary>
            Data transfer object for clinic image upload operations
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageUploadDto.Image">
            <summary>
            Image file to upload
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageUploadDto.AltText">
            <summary>
            Optional alt text for accessibility
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageUploadDto.Description">
            <summary>
            Optional description of the image
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Clinic.ImageUploadResponseDto">
            <summary>
            Response DTO for image upload operations
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ImageUploadResponseDto.Success">
            <summary>
            Indicates if the upload was successful
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ImageUploadResponseDto.ImageUrl">
            <summary>
            Public URL of the uploaded image
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ImageUploadResponseDto.FileSize">
            <summary>
            Size of the uploaded image in bytes
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ImageUploadResponseDto.OriginalFileName">
            <summary>
            Original filename of the uploaded image
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ImageUploadResponseDto.ContentType">
            <summary>
            Content type of the uploaded image
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ImageUploadResponseDto.ErrorMessage">
            <summary>
            Error message if upload failed
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ImageUploadResponseDto.UploadedAt">
            <summary>
            Timestamp when the upload was completed
            </summary>
        </member>
        <member name="M:SingleClin.API.DTOs.Clinic.ImageUploadResponseDto.CreateSuccess(System.String,System.Int64,System.String,System.String)">
            <summary>
            Create a successful upload response
            </summary>
        </member>
        <member name="M:SingleClin.API.DTOs.Clinic.ImageUploadResponseDto.CreateFailure(System.String)">
            <summary>
            Create a failed upload response
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Clinic.ClinicRequestDto">
            <summary>
            Data transfer object for creating or updating a clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicRequestDto.Name">
            <summary>
            Clinic name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicRequestDto.Type">
            <summary>
            Type of clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicRequestDto.Address">
            <summary>
            Clinic address
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicRequestDto.PhoneNumber">
            <summary>
            Clinic phone number
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicRequestDto.Email">
            <summary>
            Clinic email
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicRequestDto.Cnpj">
            <summary>
            Clinic CNPJ (Brazilian company registration)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicRequestDto.IsActive">
            <summary>
            Whether the clinic is active
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicRequestDto.Latitude">
            <summary>
            Latitude coordinate
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicRequestDto.Longitude">
            <summary>
            Longitude coordinate
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicRequestDto.Services">
            <summary>
            Services offered by this clinic
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Clinic.ClinicResponseDto">
            <summary>
            Data transfer object for clinic response
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.Id">
            <summary>
            Clinic unique identifier
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.Name">
            <summary>
            Clinic name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.Type">
            <summary>
            Type of clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.Address">
            <summary>
            Clinic address
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.PhoneNumber">
            <summary>
            Clinic phone number
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.Email">
            <summary>
            Clinic email
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.Cnpj">
            <summary>
            Clinic CNPJ (Brazilian company registration)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.IsActive">
            <summary>
            Whether the clinic is active
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.Latitude">
            <summary>
            Latitude coordinate
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.Longitude">
            <summary>
            Longitude coordinate
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.CreatedAt">
            <summary>
            When the clinic was created
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.UpdatedAt">
            <summary>
            When the clinic was last updated
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.ImageUrl">
            <summary>
            URL da imagem/logo da clínica (DEPRECATED - use Images collection)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.Images">
            <summary>
            Collection of images associated with this clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.Services">
            <summary>
            Services offered by this clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.TransactionCount">
            <summary>
            Number of transactions processed by this clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.HasImages">
            <summary>
            Indicates if the clinic has images
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.FeaturedImage">
            <summary>
            Gets the featured image or the first image if no featured image is set
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.HasImage">
            <summary>
            Indicates if the clinic has an image (backward compatibility)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicResponseDto.TypeDisplayName">
            <summary>
            Type display name for UI
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Clinic.ClinicServiceDto">
            <summary>
            Data transfer object for clinic service
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicServiceDto.Id">
            <summary>
            Service unique identifier
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicServiceDto.Name">
            <summary>
            Service name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicServiceDto.Description">
            <summary>
            Service description
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicServiceDto.Price">
            <summary>
            Service price
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicServiceDto.CreditCost">
            <summary>
            Cost in credits for this service
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicServiceDto.EffectiveCreditCost">
            <summary>
            Gets or sets CreditCost, automatically setting it based on Price if not provided
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicServiceDto.Duration">
            <summary>
            Service duration in minutes
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicServiceDto.Category">
            <summary>
            Service category
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicServiceDto.IsActive">
            <summary>
            Indicates if the service is active
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicServiceDto.ImageUrl">
            <summary>
            Service image URL
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Clinic.MultipleImageUploadDto">
            <summary>
            Data transfer object for uploading multiple clinic images
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.MultipleImageUploadDto.Images">
            <summary>
            Image files to upload (maximum 10 files)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.MultipleImageUploadDto.AltTexts">
            <summary>
            Optional alt texts for each image (must match image count)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.MultipleImageUploadDto.Descriptions">
            <summary>
            Optional descriptions for each image (must match image count)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.MultipleImageUploadDto.DisplayOrders">
            <summary>
            Display orders for each image (if not provided, will use array index)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.MultipleImageUploadDto.FeaturedImageIndex">
            <summary>
            Index of the featured image (0-based, default is first image)
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Clinic.ClinicImageUpdateDto">
            <summary>
            Data transfer object for updating clinic image properties
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageUpdateDto.AltText">
            <summary>
            Alternative text for accessibility
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageUpdateDto.Description">
            <summary>
            Description of the image
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageUpdateDto.DisplayOrder">
            <summary>
            Display order for sorting images
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.ClinicImageUpdateDto.IsFeatured">
            <summary>
            Whether this is the featured/primary image
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Clinic.MultipleImageUploadResponseDto">
            <summary>
            Response DTO for multiple image upload operations
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.MultipleImageUploadResponseDto.Success">
            <summary>
            Indicates if the upload was successful
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.MultipleImageUploadResponseDto.UploadedImages">
            <summary>
            List of uploaded images
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.MultipleImageUploadResponseDto.ErrorMessages">
            <summary>
            Error messages if any uploads failed
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.MultipleImageUploadResponseDto.SuccessCount">
            <summary>
            Count of successfully uploaded images
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.MultipleImageUploadResponseDto.FailureCount">
            <summary>
            Count of failed uploads
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Clinic.MultipleImageUploadResponseDto.UploadedAt">
            <summary>
            Timestamp when the upload was completed
            </summary>
        </member>
        <member name="M:SingleClin.API.DTOs.Clinic.MultipleImageUploadResponseDto.CreateSuccess(System.Collections.Generic.List{SingleClin.API.DTOs.Clinic.ClinicImageDto})">
            <summary>
            Create a successful upload response
            </summary>
        </member>
        <member name="M:SingleClin.API.DTOs.Clinic.MultipleImageUploadResponseDto.CreatePartialSuccess(System.Collections.Generic.List{SingleClin.API.DTOs.Clinic.ClinicImageDto},System.Collections.Generic.List{System.String})">
            <summary>
            Create a partial success response
            </summary>
        </member>
        <member name="M:SingleClin.API.DTOs.Clinic.MultipleImageUploadResponseDto.CreateFailure(System.Collections.Generic.List{System.String})">
            <summary>
            Create a failed upload response
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Common.ExportFormat">
            <summary>
            Export format options
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Common.ExportFormat.Json">
            <summary>
            JSON format (default)
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Common.ExportFormat.Excel">
            <summary>
            Excel format (.xlsx)
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Common.ExportFormat.Pdf">
            <summary>
            PDF format
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Common.ExportFormat.Csv">
            <summary>
            CSV format
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Common.PaperSize">
            <summary>
            Paper size options for PDF exports
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Common.PaperOrientation">
            <summary>
            Paper orientation options for PDF exports
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Common.PagedResultDto`1">
            <summary>
            Generic paginated result data transfer object
            </summary>
            <typeparam name="T">Type of items in the result</typeparam>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.Items">
            <summary>
            List of items in current page
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.PageNumber">
            <summary>
            Current page number (1-based)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.PageSize">
            <summary>
            Number of items per page
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.TotalCount">
            <summary>
            Total number of items across all pages
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.TotalPages">
            <summary>
            Total number of pages
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.HasPreviousPage">
            <summary>
            Whether there is a previous page
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.HasNextPage">
            <summary>
            Whether there is a next page
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Common.PagedResultDto`1.ItemCount">
            <summary>
            Number of items in current page
            </summary>
        </member>
        <member name="M:SingleClin.API.DTOs.Common.PagedResultDto`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new paginated result
            </summary>
        </member>
        <member name="M:SingleClin.API.DTOs.Common.PagedResultDto`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData">
            <summary>
            Template data for low balance notification emails
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.UserName">
            <summary>
            User's name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.CurrentBalance">
            <summary>
            Current balance of credits
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.PlanName">
            <summary>
            Plan name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.ClinicName">
            <summary>
            Clinic name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.ClinicAddress">
            <summary>
            Clinic address
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.ClinicPhone">
            <summary>
            Clinic phone
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.ClinicEmail">
            <summary>
            Clinic email
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.SupportPhone">
            <summary>
            Support phone number
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.SupportEmail">
            <summary>
            Support email
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.RenewUrl">
            <summary>
            URL to renew credits
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.AppUrl">
            <summary>
            URL to app
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.SupportUrl">
            <summary>
            URL to support
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.PreferencesUrl">
            <summary>
            URL to manage notification preferences
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.UnsubscribeUrl">
            <summary>
            URL to unsubscribe/manage preferences
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.CurrentYear">
            <summary>
            Current year for copyright
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.IsPlural">
            <summary>
            Whether to use plural form for credits
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.UserId">
            <summary>
            User ID for tracking
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.PlanId">
            <summary>
            Plan ID for tracking
            </summary>
        </member>
        <member name="M:SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData.Create(System.Guid,System.String,System.Int32,System.String,System.Guid)">
            <summary>
            Creates template data from notification context
            </summary>
            <param name="userId">User ID</param>
            <param name="userName">User name</param>
            <param name="currentBalance">Current balance</param>
            <param name="planName">Plan name</param>
            <param name="planId">Plan ID</param>
            <returns>Populated template data</returns>
        </member>
        <member name="T:SingleClin.API.DTOs.EmailTemplate.RenderedEmailTemplate">
            <summary>
            Represents a rendered email template with both HTML and text versions
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.RenderedEmailTemplate.Subject">
            <summary>
            Subject line of the email
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.RenderedEmailTemplate.HtmlContent">
            <summary>
            HTML version of the email content
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.RenderedEmailTemplate.TextContent">
            <summary>
            Plain text version of the email content
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.RenderedEmailTemplate.TemplateName">
            <summary>
            Template name used for rendering
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.RenderedEmailTemplate.RenderedAt">
            <summary>
            Timestamp when the template was rendered
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.RenderedEmailTemplate.HasHtmlContent">
            <summary>
            Whether HTML content is available
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.RenderedEmailTemplate.HasTextContent">
            <summary>
            Whether text content is available
            </summary>
        </member>
        <member name="M:SingleClin.API.DTOs.EmailTemplate.RenderedEmailTemplate.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a rendered template instance
            </summary>
            <param name="templateName">Template name</param>
            <param name="subject">Email subject</param>
            <param name="htmlContent">HTML content</param>
            <param name="textContent">Text content</param>
            <returns>Rendered email template</returns>
        </member>
        <member name="T:SingleClin.API.DTOs.EmailTemplate.UserConfirmationTemplateData">
            <summary>
            Template data for user confirmation emails
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.UserConfirmationTemplateData.UserName">
            <summary>
            User's name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.UserConfirmationTemplateData.UserEmail">
            <summary>
            User's email address
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.UserConfirmationTemplateData.UserPassword">
            <summary>
            User's password (for confirmation email)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.UserConfirmationTemplateData.ClinicName">
            <summary>
            Name of the associated clinic (optional)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.UserConfirmationTemplateData.AppUrl">
            <summary>
            Application URL for accessing the system
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.UserConfirmationTemplateData.SupportPhone">
            <summary>
            Support phone number
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.UserConfirmationTemplateData.SupportEmail">
            <summary>
            Support email address
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.UserConfirmationTemplateData.SupportUrl">
            <summary>
            Support URL for help documentation
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.EmailTemplate.UserConfirmationTemplateData.PreferencesUrl">
            <summary>
            URL for managing preferences
            </summary>
        </member>
        <member name="M:SingleClin.API.DTOs.EmailTemplate.UserConfirmationTemplateData.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance with basic user information
            </summary>
            <param name="userName">User's name</param>
            <param name="userEmail">User's email</param>
            <param name="userPassword">User's password</param>
            <param name="clinicName">Optional clinic name</param>
            <returns>New UserConfirmationTemplateData instance</returns>
        </member>
        <member name="T:SingleClin.API.DTOs.Export.ExportRequest">
            <summary>
            Export request model
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Export.ExportOptions">
            <summary>
            Export options
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Export.ExportResponse">
            <summary>
            Export response model
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Export.MultipleExportRequest">
            <summary>
            Request model for exporting multiple reports
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.NotificationPreferences.NotificationPreferencesDto.EnablePush">
            <summary>
            Whether the user wants to receive push notifications
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.NotificationPreferences.NotificationPreferencesDto.EnableEmail">
            <summary>
            Whether the user wants to receive email notifications
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.NotificationPreferences.NotificationPreferencesDto.LowBalanceThreshold">
            <summary>
            Threshold for low balance notifications (in credits remaining)
            Valid range: 1-5 credits
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.NotificationPreferences.NotificationPreferencesDto.PreferredLanguage">
            <summary>
            Preferred language for notifications (ISO 639-1 code)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.NotificationPreferences.NotificationPreferencesDto.EnablePromotional">
            <summary>
            Whether to receive promotional notifications
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.NotificationPreferences.NotificationPreferencesDto.EnablePayment">
            <summary>
            Whether to receive payment-related notifications
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.NotificationPreferences.NotificationPreferencesDto.QuietHoursStart">
            <summary>
            Custom quiet hours start time (24-hour format, e.g., "22:00")
            If null, uses system default
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.NotificationPreferences.NotificationPreferencesDto.QuietHoursEnd">
            <summary>
            Custom quiet hours end time (24-hour format, e.g., "08:00")
            If null, uses system default
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.NotificationPreferences.NotificationPreferencesDto.DeviceToken">
            <summary>
            Device token for push notifications (FCM token)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.NotificationPreferences.NotificationPreferencesDto.DevicePlatform">
            <summary>
            Device platform (iOS, Android, Web)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.NotificationPreferences.NotificationPreferencesResponseDto.UserId">
            <summary>
            User ID these preferences belong to
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.NotificationPreferences.NotificationPreferencesResponseDto.CreatedAt">
            <summary>
            When the preferences were created
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.NotificationPreferences.NotificationPreferencesResponseDto.UpdatedAt">
            <summary>
            When the preferences were last updated
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.NotificationPreferences.UpdateDeviceTokenDto.DeviceToken">
            <summary>
            Device token for push notifications (FCM token)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.NotificationPreferences.UpdateDeviceTokenDto.DevicePlatform">
            <summary>
            Device platform (iOS, Android, Web)
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Plan.PlanFilterDto">
            <summary>
            Data transfer object for filtering plans
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.PageNumber">
            <summary>
            Page number (1-based)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.PageSize">
            <summary>
            Number of items per page
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.IsActive">
            <summary>
            Filter by active status
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.IsFeatured">
            <summary>
            Filter by featured status
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.SearchTerm">
            <summary>
            Search term for name or description
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.MinPrice">
            <summary>
            Minimum price filter
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.MaxPrice">
            <summary>
            Maximum price filter
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.MinCredits">
            <summary>
            Minimum credits filter
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.MaxCredits">
            <summary>
            Maximum credits filter
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.SortBy">
            <summary>
            Sort field
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanFilterDto.SortDirection">
            <summary>
            Sort direction (asc or desc)
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Plan.PlanRequestDto">
            <summary>
            Data transfer object for creating or updating a plan
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.Name">
            <summary>
            Plan name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.Description">
            <summary>
            Plan description
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.Credits">
            <summary>
            Number of credits included in the plan
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.Price">
            <summary>
            Plan price
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.OriginalPrice">
            <summary>
            Original price (for discounts)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.ValidityDays">
            <summary>
            Validity period in days
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.IsActive">
            <summary>
            Whether the plan is active
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.DisplayOrder">
            <summary>
            Display order for sorting (optional - will be auto-calculated if not provided)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanRequestDto.IsFeatured">
            <summary>
            Whether this is a featured plan
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Plan.PlanResponseDto">
            <summary>
            Data transfer object for plan response
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.Id">
            <summary>
            Plan unique identifier
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.Name">
            <summary>
            Plan name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.Description">
            <summary>
            Plan description
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.Credits">
            <summary>
            Number of credits included in the plan
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.Price">
            <summary>
            Plan price
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.OriginalPrice">
            <summary>
            Original price (for showing discounts)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.ValidityDays">
            <summary>
            Validity period in days
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.IsActive">
            <summary>
            Whether the plan is active
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.DisplayOrder">
            <summary>
            Display order for sorting
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.IsFeatured">
            <summary>
            Whether this is a featured plan
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.CreatedAt">
            <summary>
            When the plan was created
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.UpdatedAt">
            <summary>
            When the plan was last updated
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.DiscountPercentage">
            <summary>
            Calculated discount percentage (if OriginalPrice is set)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PlanResponseDto.PricePerCredit">
            <summary>
            Calculated price per credit
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Plan.PurchasePlanDto">
            <summary>
            DTO for purchasing a plan
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PurchasePlanDto.PlanId">
            <summary>
            ID of the plan to purchase
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PurchasePlanDto.PaymentMethod">
            <summary>
            Payment method used (optional)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PurchasePlanDto.PaymentTransactionId">
            <summary>
            Payment transaction ID from payment provider (optional)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.PurchasePlanDto.Notes">
            <summary>
            Optional notes about the purchase
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Plan.UserPlanResponseDto">
            <summary>
            DTO for user plan response
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.Id">
            <summary>
            User plan ID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.UserId">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.PlanId">
            <summary>
            Plan ID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.Plan">
            <summary>
            Plan information
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.Credits">
            <summary>
            Total credits purchased
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.CreditsRemaining">
            <summary>
            Credits remaining
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.CreditsUsed">
            <summary>
            Credits used
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.AmountPaid">
            <summary>
            Amount paid for the plan
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.ExpirationDate">
            <summary>
            When the plan expires
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.IsActive">
            <summary>
            Whether the plan is active
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.IsExpired">
            <summary>
            Whether the plan is expired
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.PaymentMethod">
            <summary>
            Payment method used
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.PaymentTransactionId">
            <summary>
            Payment transaction ID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.Notes">
            <summary>
            Purchase notes
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.CreatedAt">
            <summary>
            When the plan was purchased
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Plan.UserPlanResponseDto.UpdatedAt">
            <summary>
            Last update date
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.QRCode.QRCodeGenerateRequestDto">
            <summary>
            Request DTO for QR Code generation
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeGenerateRequestDto.Size">
            <summary>
            QR Code size in pixels (optional, default: 300)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeGenerateRequestDto.ExpirationMinutes">
            <summary>
            QR Code expiration in minutes (optional, default: 30)
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.QRCode.QRCodeGenerateResponseDto">
            <summary>
            Response DTO for QR Code generation
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeGenerateResponseDto.Success">
            <summary>
            Indicates if QR Code generation was successful
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeGenerateResponseDto.QRCode">
            <summary>
            QR Code image as Data URL (base64 encoded PNG)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeGenerateResponseDto.Token">
            <summary>
            JWT token embedded in the QR Code
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeGenerateResponseDto.Nonce">
            <summary>
            Unique nonce for this QR Code
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeGenerateResponseDto.ExpiresAt">
            <summary>
            QR Code expiration timestamp (UTC)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeGenerateResponseDto.GeneratedAt">
            <summary>
            QR Code generation timestamp (UTC)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeGenerateResponseDto.ErrorMessage">
            <summary>
            Error message if generation failed
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.QRCode.QRCodeValidateRequestDto">
            <summary>
            Request DTO for QR Code validation by clinics
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeValidateRequestDto.QRToken">
            <summary>
            JWT token extracted from QR Code
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeValidateRequestDto.ClinicId">
            <summary>
            ID of the clinic performing the validation
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeValidateRequestDto.ServiceType">
            <summary>
            Type of service being provided (optional)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeValidateRequestDto.ServiceDescription">
            <summary>
            Service description or additional notes
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeValidateRequestDto.Amount">
            <summary>
            Amount to charge for this service (optional, defaults to 1 credit)
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.QRCode.QRCodeValidateResponseDto">
            <summary>
            Response DTO for QR Code validation
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeValidateResponseDto.Success">
            <summary>
            Indicates if validation was successful
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeValidateResponseDto.TransactionId">
            <summary>
            Transaction ID created for this validation
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeValidateResponseDto.TransactionCode">
            <summary>
            Transaction code for reference
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeValidateResponseDto.Patient">
            <summary>
            Patient information
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeValidateResponseDto.UserPlan">
            <summary>
            User plan information
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeValidateResponseDto.Transaction">
            <summary>
            Transaction details
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeValidateResponseDto.ValidatedAt">
            <summary>
            Validation timestamp (UTC)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.QRCode.QRCodeValidateResponseDto.Error">
            <summary>
            Error information if validation failed
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.QRCode.PatientInfo">
            <summary>
            Patient information for QR validation response
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.QRCode.UserPlanInfo">
            <summary>
            User plan information for QR validation response
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.QRCode.TransactionInfo">
            <summary>
            Transaction information for QR validation response
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.QRCode.ValidationError">
            <summary>
            Validation error information
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ClinicRankingData">
            <summary>
            Clinic ranking report data
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ClinicRankingItem">
            <summary>
            Individual clinic ranking item
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ClinicMetrics">
            <summary>
            Clinic performance metrics
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ClinicPerformanceMetrics">
            <summary>
            Overall clinic performance metrics
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ClinicGrowthData">
            <summary>
            Clinic growth data
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.PlanUtilizationData">
            <summary>
            Plan utilization report data
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.PlanUtilizationItem">
            <summary>
            Individual plan utilization data
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.PlanUsageMetrics">
            <summary>
            Plan usage metrics
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.PlanEfficiency">
            <summary>
            Plan efficiency metrics
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.UsageByMonth">
            <summary>
            Monthly usage breakdown
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.UtilizationSummary">
            <summary>
            Overall utilization summary
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.UtilizationPattern">
            <summary>
            Utilization patterns
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.PlanEfficiencyMetrics">
            <summary>
            Plan efficiency metrics across all plans
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ReportPeriod">
            <summary>
            Time period granularity for reports
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Report.ReportPeriod.Daily">
            <summary>
            Daily aggregation
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Report.ReportPeriod.Weekly">
            <summary>
            Weekly aggregation
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Report.ReportPeriod.Monthly">
            <summary>
            Monthly aggregation
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Report.ReportPeriod.Quarterly">
            <summary>
            Quarterly aggregation
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Report.ReportPeriod.Yearly">
            <summary>
            Yearly aggregation
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Report.ReportPeriod.Custom">
            <summary>
            Custom date range without aggregation
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ReportRequest">
            <summary>
            Request parameters for report generation
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportRequest.Type">
            <summary>
            Type of report to generate
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportRequest.Period">
            <summary>
            Time period aggregation
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportRequest.StartDate">
            <summary>
            Start date for the report
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportRequest.EndDate">
            <summary>
            End date for the report
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportRequest.ClinicIds">
            <summary>
            Filter by specific clinic IDs (optional)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportRequest.PlanIds">
            <summary>
            Filter by specific plan IDs (optional)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportRequest.ServiceTypes">
            <summary>
            Filter by service types (optional)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportRequest.Page">
            <summary>
            Page number for pagination (1-based)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportRequest.PageSize">
            <summary>
            Page size for pagination
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportRequest.SortBy">
            <summary>
            Sort field
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportRequest.SortDirection">
            <summary>
            Sort direction (asc/desc)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportRequest.IncludeDetails">
            <summary>
            Include detailed breakdown
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportRequest.ExportFormat">
            <summary>
            Export format (optional)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportRequest.TimeZone">
            <summary>
            Timezone for date calculations (IANA timezone)
            </summary>
        </member>
        <member name="M:SingleClin.API.DTOs.Report.ReportRequest.IsValid">
            <summary>
            Validate date range
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ReportResponse`1">
            <summary>
            Base response for all report types
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportResponse`1.Type">
            <summary>
            Report type
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportResponse`1.Title">
            <summary>
            Report title
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportResponse`1.Description">
            <summary>
            Report description
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportResponse`1.GeneratedAt">
            <summary>
            Generation timestamp
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportResponse`1.Period">
            <summary>
            Report period information
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportResponse`1.Filters">
            <summary>
            Applied filters
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportResponse`1.Data">
            <summary>
            Report data
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportResponse`1.Summary">
            <summary>
            Summary statistics
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportResponse`1.ChartData">
            <summary>
            Chart data for visualization
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportResponse`1.Pagination">
            <summary>
            Pagination information
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportResponse`1.ExecutionTimeMs">
            <summary>
            Execution time in milliseconds
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportResponse`1.FromCache">
            <summary>
            Whether data was served from cache
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Report.ReportResponse`1.CacheExpiresAt">
            <summary>
            Cache expiry time
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ReportPeriodInfo">
            <summary>
            Report period information
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ReportFilters">
            <summary>
            Applied filters summary
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ReportSummary">
            <summary>
            Report summary statistics
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ChartData">
            <summary>
            Chart data for frontend visualization
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ChartDataset">
            <summary>
            Chart dataset
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ChartOptions">
            <summary>
            Chart display options
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.PaginationInfo">
            <summary>
            Pagination information
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ReportType">
            <summary>
            Types of reports available in the system
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Report.ReportType.UsageByPeriod">
            <summary>
            Usage analysis by time period (daily, weekly, monthly)
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Report.ReportType.ClinicRanking">
            <summary>
            Ranking of clinics by various metrics
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Report.ReportType.TopServices">
            <summary>
            Most used services analysis
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Report.ReportType.PlanUtilization">
            <summary>
            Plan utilization rates and efficiency
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Report.ReportType.PatientActivity">
            <summary>
            Patient activity and retention analysis
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Report.ReportType.FinancialSummary">
            <summary>
            Revenue and financial metrics
            </summary>
        </member>
        <member name="F:SingleClin.API.DTOs.Report.ReportType.TransactionAnalysis">
            <summary>
            Transaction details and patterns
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ServiceReportData">
            <summary>
            Service usage report data
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ServiceUsageItem">
            <summary>
            Individual service usage data
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ServiceDistribution">
            <summary>
            Service distribution analysis
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ServiceTrend">
            <summary>
            Service usage trends
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.TrendPoint">
            <summary>
            Trend data point
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ServiceInsights">
            <summary>
            Service insights and recommendations
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.ServiceCorrelation">
            <summary>
            Service correlation data
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.UsageReportData">
            <summary>
            Usage report data structure
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.UsagePeriodData">
            <summary>
            Usage data for a specific period
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.UsageTrend">
            <summary>
            Usage trend analysis
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.UsageByClinic">
            <summary>
            Usage by clinic
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Report.UsageByPlan">
            <summary>
            Usage by plan
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Transaction.DashboardMetricsDto">
            <summary>
            DTO for transaction dashboard metrics
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.DashboardMetricsDto.TotalTransactions">
            <summary>
            Total number of transactions in the system
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.DashboardMetricsDto.TotalRevenue">
            <summary>
            Total revenue from all transactions
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.DashboardMetricsDto.TransactionsThisMonth">
            <summary>
            Number of transactions this month
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.DashboardMetricsDto.RevenueThisMonth">
            <summary>
            Revenue this month
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.DashboardMetricsDto.ActivePatients">
            <summary>
            Number of active patients (with transactions)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.DashboardMetricsDto.ActiveClinics">
            <summary>
            Number of active clinics (with transactions)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.DashboardMetricsDto.ActivePlans">
            <summary>
            Number of active plans (with transactions)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.DashboardMetricsDto.AverageTransactionAmount">
            <summary>
            Average transaction amount
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.DashboardMetricsDto.AverageCreditsPerTransaction">
            <summary>
            Average credits used per transaction
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.DashboardMetricsDto.MostUsedPlan">
            <summary>
            Most used plan information
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.DashboardMetricsDto.TopClinic">
            <summary>
            Top performing clinic
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.DashboardMetricsDto.StatusDistribution">
            <summary>
            Transaction status distribution
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.DashboardMetricsDto.MonthlyTrends">
            <summary>
            Monthly trends (last 12 months)
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Transaction.MostUsedPlanDto">
            <summary>
            Most used plan information
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.MostUsedPlanDto.Id">
            <summary>
            Plan ID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.MostUsedPlanDto.Name">
            <summary>
            Plan name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.MostUsedPlanDto.TransactionCount">
            <summary>
            Number of transactions
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.MostUsedPlanDto.TotalRevenue">
            <summary>
            Total revenue from this plan
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Transaction.TopClinicDto">
            <summary>
            Top performing clinic information
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TopClinicDto.Id">
            <summary>
            Clinic ID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TopClinicDto.Name">
            <summary>
            Clinic name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TopClinicDto.TransactionCount">
            <summary>
            Number of transactions
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TopClinicDto.TotalRevenue">
            <summary>
            Total revenue from this clinic
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Transaction.StatusDistributionDto">
            <summary>
            Transaction status distribution
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.StatusDistributionDto.Status">
            <summary>
            Transaction status
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.StatusDistributionDto.Count">
            <summary>
            Number of transactions with this status
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.StatusDistributionDto.Percentage">
            <summary>
            Percentage of total transactions
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Transaction.MonthlyTrendDto">
            <summary>
            Monthly trend data
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.MonthlyTrendDto.Month">
            <summary>
            Month and year (YYYY-MM)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.MonthlyTrendDto.TransactionCount">
            <summary>
            Number of transactions in the month
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.MonthlyTrendDto.Revenue">
            <summary>
            Total revenue in the month
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.MonthlyTrendDto.CreditsUsed">
            <summary>
            Total credits used in the month
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Transaction.TransactionCancelDto">
            <summary>
            DTO for cancelling a transaction
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionCancelDto.CancellationReason">
            <summary>
            Reason for cancelling the transaction (required)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionCancelDto.Notes">
            <summary>
            Additional notes about the cancellation
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionCancelDto.RefundCredits">
            <summary>
            Whether to refund credits to the patient's plan (default: true)
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Transaction.TransactionFilterDto">
            <summary>
            DTO for filtering transactions
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.Search">
            <summary>
            Search term for patient name, transaction code, or clinic name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.PatientId">
            <summary>
            Filter by patient ID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.ClinicId">
            <summary>
            Filter by clinic ID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.PlanId">
            <summary>
            Filter by plan ID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.Status">
            <summary>
            Filter by transaction status
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.StartDate">
            <summary>
            Filter by start date (inclusive)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.EndDate">
            <summary>
            Filter by end date (inclusive)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.ValidationStartDate">
            <summary>
            Filter by validation start date
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.ValidationEndDate">
            <summary>
            Filter by validation end date
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.MinAmount">
            <summary>
            Filter by minimum amount
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.MaxAmount">
            <summary>
            Filter by maximum amount
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.MinCredits">
            <summary>
            Filter by minimum credits used
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.MaxCredits">
            <summary>
            Filter by maximum credits used
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.ServiceType">
            <summary>
            Filter by service type
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.IncludeCancelled">
            <summary>
            Include cancelled transactions (default: false)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.Page">
            <summary>
            Page number for pagination (1-based)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.Limit">
            <summary>
            Number of items per page
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.SortBy">
            <summary>
            Field to sort by
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionFilterDto.SortOrder">
            <summary>
            Sort order (asc or desc)
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Transaction.TransactionListResponseDto">
            <summary>
            Response DTO for paginated transaction list
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionListResponseDto.Data">
            <summary>
            List of transactions
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionListResponseDto.Total">
            <summary>
            Total number of transactions (all pages)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionListResponseDto.Page">
            <summary>
            Current page number
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionListResponseDto.Limit">
            <summary>
            Number of items per page
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionListResponseDto.TotalPages">
            <summary>
            Total number of pages
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionListResponseDto.HasNextPage">
            <summary>
            Whether there is a next page
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionListResponseDto.HasPreviousPage">
            <summary>
            Whether there is a previous page
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Transaction.TransactionResponseDto">
            <summary>
            Response DTO for transaction information
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.Id">
            <summary>
            Transaction ID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.Code">
            <summary>
            Unique transaction code
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.PatientId">
            <summary>
            Patient ID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.PatientName">
            <summary>
            Patient full name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.PatientEmail">
            <summary>
            Patient email
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.ClinicId">
            <summary>
            Clinic ID where transaction occurred
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.ClinicName">
            <summary>
            Clinic name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.PlanId">
            <summary>
            Plan ID used for transaction
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.PlanName">
            <summary>
            Plan name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.UserPlanId">
            <summary>
            User plan ID used
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.Status">
            <summary>
            Transaction status
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.CreditsUsed">
            <summary>
            Number of credits used
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.ServiceDescription">
            <summary>
            Service or procedure description
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.ServiceType">
            <summary>
            Service type
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.Amount">
            <summary>
            Amount charged for this transaction
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.CreatedAt">
            <summary>
            Date when transaction was created
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.ValidationDate">
            <summary>
            Date when transaction was validated
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.ValidatedBy">
            <summary>
            User who validated the transaction
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.ValidationNotes">
            <summary>
            Validation notes
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.CancellationDate">
            <summary>
            Date when transaction was cancelled
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.CancellationReason">
            <summary>
            Cancellation reason
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.Latitude">
            <summary>
            Latitude where transaction occurred
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.Longitude">
            <summary>
            Longitude where transaction occurred
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.IpAddress">
            <summary>
            IP address from where transaction was created
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.UserAgent">
            <summary>
            User agent of device that created transaction
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.QRToken">
            <summary>
            QR token used for transaction
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionResponseDto.UpdatedAt">
            <summary>
            Last updated date
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.Transaction.TransactionUpdateDto">
            <summary>
            DTO for updating transaction information
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionUpdateDto.ServiceDescription">
            <summary>
            Service or procedure description
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionUpdateDto.ServiceType">
            <summary>
            Service type
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionUpdateDto.ValidationNotes">
            <summary>
            Validation notes
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.Transaction.TransactionUpdateDto.Amount">
            <summary>
            Amount charged for this transaction
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.User.CreateUserDto">
            <summary>
            DTO for creating a new user
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.CreateUserDto.Email">
            <summary>
            User email
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.CreateUserDto.FirstName">
            <summary>
            User first name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.CreateUserDto.LastName">
            <summary>
            User last name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.CreateUserDto.Role">
            <summary>
            User role
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.CreateUserDto.PhoneNumber">
            <summary>
            User phone number
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.CreateUserDto.ClinicId">
            <summary>
            Associated clinic ID (for clinic users)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.CreateUserDto.Password">
            <summary>
            User password
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.User.ToggleStatusDto">
            <summary>
            DTO for toggling user status
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.ToggleStatusDto.IsActive">
            <summary>
            New active status
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.User.UpdateUserDto">
            <summary>
            DTO for updating user information
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UpdateUserDto.FirstName">
            <summary>
            User first name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UpdateUserDto.LastName">
            <summary>
            User last name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UpdateUserDto.PhoneNumber">
            <summary>
            User phone number
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UpdateUserDto.IsActive">
            <summary>
            Whether the user is active
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UpdateUserDto.Role">
            <summary>
            User role (only administrators can change)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UpdateUserDto.ClinicId">
            <summary>
            Associated clinic ID
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.User.UserFilterDto">
            <summary>
            DTO for filtering users
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserFilterDto.Search">
            <summary>
            Search term (searches in name, email, phone)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserFilterDto.Role">
            <summary>
            Filter by role
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserFilterDto.IsActive">
            <summary>
            Filter by active status
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserFilterDto.IsEmailVerified">
            <summary>
            Filter by email verification status
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserFilterDto.ClinicId">
            <summary>
            Filter by clinic ID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserFilterDto.CreatedAfter">
            <summary>
            Filter by creation date (after)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserFilterDto.CreatedBefore">
            <summary>
            Filter by creation date (before)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserFilterDto.SortBy">
            <summary>
            Sort by field
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserFilterDto.SortOrder">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserFilterDto.Page">
            <summary>
            Page number (1-based)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserFilterDto.Limit">
            <summary>
            Items per page
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.User.UserListResponseDto">
            <summary>
            Response DTO for user list endpoint to match frontend expectations
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserListResponseDto.Data">
            <summary>
            List of users
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserListResponseDto.Total">
            <summary>
            Total number of users
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserListResponseDto.Page">
            <summary>
            Current page number
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserListResponseDto.Limit">
            <summary>
            Items per page
            </summary>
        </member>
        <member name="T:SingleClin.API.DTOs.User.UserResponseDto">
            <summary>
            User response DTO
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserResponseDto.Id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserResponseDto.Email">
            <summary>
            User email
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserResponseDto.FirstName">
            <summary>
            User first name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserResponseDto.LastName">
            <summary>
            User last name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserResponseDto.FullName">
            <summary>
            User full name
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserResponseDto.Role">
            <summary>
            User role
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserResponseDto.IsActive">
            <summary>
            Whether the user is active
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserResponseDto.IsEmailVerified">
            <summary>
            Whether the user's email is verified
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserResponseDto.PhoneNumber">
            <summary>
            User phone number
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserResponseDto.ClinicId">
            <summary>
            Associated clinic ID (for clinic users)
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserResponseDto.CreatedAt">
            <summary>
            When the user was created
            </summary>
        </member>
        <member name="P:SingleClin.API.DTOs.User.UserResponseDto.UpdatedAt">
            <summary>
            When the user was last updated
            </summary>
        </member>
        <member name="T:SingleClin.API.EnsureTablesExist">
            <summary>
            Helper class to ensure required tables exist in the database
            This is a temporary solution to resolve schema conflicts between DbContexts
            </summary>
        </member>
        <member name="T:SingleClin.API.Exceptions.PlanNotFoundException">
            <summary>
            Exception thrown when a plan is not found
            </summary>
        </member>
        <member name="T:SingleClin.API.Exceptions.DuplicatePlanNameException">
            <summary>
            Exception thrown when attempting to create a plan with a duplicate name
            </summary>
        </member>
        <member name="T:SingleClin.API.Exceptions.PlanValidationException">
            <summary>
            Exception thrown when plan validation fails
            </summary>
        </member>
        <member name="T:SingleClin.API.Exceptions.InvalidPlanOperationException">
            <summary>
            Exception thrown when attempting to perform invalid operations on plans
            </summary>
        </member>
        <member name="T:SingleClin.API.Exceptions.QRCodeValidationException">
            <summary>
            Base exception for QR Code validation errors
            </summary>
        </member>
        <member name="T:SingleClin.API.Exceptions.QRExpiredException">
            <summary>
            Exception thrown when QR Code token is expired
            </summary>
        </member>
        <member name="T:SingleClin.API.Exceptions.QRAlreadyUsedException">
            <summary>
            Exception thrown when QR Code has already been used
            </summary>
        </member>
        <member name="T:SingleClin.API.Exceptions.InvalidQRException">
            <summary>
            Exception thrown when QR Code token is invalid or malformed
            </summary>
        </member>
        <member name="T:SingleClin.API.Exceptions.InsufficientCreditsException">
            <summary>
            Exception thrown when user plan has insufficient credits
            </summary>
        </member>
        <member name="T:SingleClin.API.Exceptions.InvalidUserPlanException">
            <summary>
            Exception thrown when user plan is not found or inactive
            </summary>
        </member>
        <member name="T:SingleClin.API.Exceptions.UnauthorizedClinicException">
            <summary>
            Exception thrown when clinic is not authorized for the operation
            </summary>
        </member>
        <member name="T:SingleClin.API.Extensions.DatabaseExtensions">
            <summary>
            Extension methods for database configuration
            </summary>
        </member>
        <member name="M:SingleClin.API.Extensions.DatabaseExtensions.ConfigureDatabaseAsync(Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            Configure database migrations and seeding
            </summary>
        </member>
        <member name="M:SingleClin.API.Extensions.DatabaseExtensions.CreateClinicServicesTableAsync(SingleClin.API.Data.ApplicationDbContext)">
            <summary>
            Manually create ClinicServices table to resolve migration issues
            </summary>
        </member>
        <member name="M:SingleClin.API.Extensions.DatabaseExtensions.SeedSampleClinicsAsync(SingleClin.API.Data.ApplicationDbContext)">
            <summary>
            Seed sample clinic data if none exists
            </summary>
        </member>
        <member name="T:SingleClin.API.Extensions.KeyVaultConfigurationExtensions">
            <summary>
            Extension methods for configuring Azure Key Vault integration
            </summary>
        </member>
        <member name="M:SingleClin.API.Extensions.KeyVaultConfigurationExtensions.AddAzureKeyVault(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Hosting.IHostEnvironment)">
            <summary>
            Adds Azure Key Vault as a configuration source
            </summary>
            <param name="builder">The configuration builder</param>
            <param name="environment">The hosting environment</param>
            <returns>The configuration builder</returns>
        </member>
        <member name="M:SingleClin.API.Extensions.KeyVaultConfigurationExtensions.GetAzureCredential(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Hosting.IHostEnvironment,System.Boolean)">
            <summary>
            Gets the appropriate Azure credential based on environment and configuration
            </summary>
        </member>
        <member name="T:SingleClin.API.Extensions.PrefixedKeyVaultSecretManager">
            <summary>
            Custom Key Vault secret manager that handles secret name transformations
            </summary>
        </member>
        <member name="M:SingleClin.API.Extensions.PrefixedKeyVaultSecretManager.GetKey(Azure.Security.KeyVault.Secrets.KeyVaultSecret)">
            <summary>
            Transforms Key Vault secret names to configuration keys
            </summary>
            <param name="secret">The Key Vault secret</param>
            <returns>The configuration key</returns>
        </member>
        <member name="M:SingleClin.API.Extensions.PrefixedKeyVaultSecretManager.Load(Azure.Security.KeyVault.Secrets.SecretProperties)">
            <summary>
            Determines if a secret should be loaded
            </summary>
            <param name="secret">The Key Vault secret</param>
            <returns>True if the secret should be loaded</returns>
        </member>
        <member name="T:SingleClin.API.Filters.SwaggerDefaultValues">
            <summary>
            Swagger operation filter to improve API documentation
            </summary>
        </member>
        <member name="M:SingleClin.API.Filters.SwaggerDefaultValues.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Apply the filter to the operation
            </summary>
        </member>
        <member name="T:SingleClin.API.HealthChecks.ApiHealthCheck">
            <summary>
            General API health check
            </summary>
        </member>
        <member name="T:SingleClin.API.HealthChecks.FirebaseHealthCheck">
            <summary>
            Health check for Firebase Admin SDK connectivity
            </summary>
        </member>
        <member name="T:SingleClin.API.HealthChecks.KeyVaultHealthCheck">
            <summary>
            Health check for Azure Key Vault connectivity
            </summary>
        </member>
        <member name="M:SingleClin.API.HealthChecks.KeyVaultHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <summary>
            Checks the health of the Key Vault connection
            </summary>
            <param name="context">Health check context</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Health check result</returns>
        </member>
        <member name="T:SingleClin.API.HealthChecks.RedisHealthCheck">
            <summary>
            Health check for Redis connection
            </summary>
        </member>
        <member name="T:SingleClin.API.Jobs.BalanceCheckJob">
            <summary>
            Background job that checks user balances and sends notifications for low balance thresholds
            </summary>
        </member>
        <member name="M:SingleClin.API.Jobs.BalanceCheckJob.ExecuteAsync">
            <summary>
            Executes the balance check job
            </summary>
        </member>
        <member name="M:SingleClin.API.Jobs.BalanceCheckJob.GetUserPlansWithLowBalanceAsync">
            <summary>
            Gets user plans with low balance that may qualify for notifications
            </summary>
        </member>
        <member name="M:SingleClin.API.Jobs.BalanceCheckJob.WasRecentlyNotifiedAsync(System.Guid,System.Int32)">
            <summary>
            Checks if user was recently notified for a specific balance level to prevent spam
            </summary>
        </member>
        <member name="M:SingleClin.API.Jobs.BalanceCheckJob.GetStatsAsync">
            <summary>
            Gets comprehensive statistics about the balance check job execution
            </summary>
        </member>
        <member name="T:SingleClin.API.Jobs.BalanceCheckJobStats">
            <summary>
            Statistics for balance check job execution
            </summary>
        </member>
        <member name="T:SingleClin.API.Middleware.ClinicRateLimitingMiddleware">
            <summary>
            Rate limiting middleware for clinic QR Code validation endpoints
            </summary>
        </member>
        <member name="M:SingleClin.API.Middleware.ClinicRateLimitingMiddleware.ShouldApplyRateLimit(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Check if rate limiting should be applied to this request
            </summary>
        </member>
        <member name="M:SingleClin.API.Middleware.ClinicRateLimitingMiddleware.GetClinicIdFromContext(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Extract clinic ID from JWT claims
            </summary>
        </member>
        <member name="M:SingleClin.API.Middleware.ClinicRateLimitingMiddleware.CheckRateLimitAsync(System.String)">
            <summary>
            Check if the clinic has exceeded the rate limit
            </summary>
        </member>
        <member name="M:SingleClin.API.Middleware.ClinicRateLimitingMiddleware.UpdateRateLimitAsync(System.String,SingleClin.API.Middleware.RateLimitInfo)">
            <summary>
            Update the rate limit counter
            </summary>
        </member>
        <member name="M:SingleClin.API.Middleware.ClinicRateLimitingMiddleware.GetRateLimitConfig(System.String)">
            <summary>
            Get rate limit configuration for clinic
            </summary>
        </member>
        <member name="M:SingleClin.API.Middleware.ClinicRateLimitingMiddleware.GetRateLimitKey(System.String)">
            <summary>
            Generate Redis key for rate limiting
            </summary>
        </member>
        <member name="M:SingleClin.API.Middleware.ClinicRateLimitingMiddleware.AddRateLimitHeaders(Microsoft.AspNetCore.Http.HttpContext,SingleClin.API.Middleware.RateLimitInfo)">
            <summary>
            Add rate limit headers to response
            </summary>
        </member>
        <member name="M:SingleClin.API.Middleware.ClinicRateLimitingMiddleware.HandleRateLimitExceeded(Microsoft.AspNetCore.Http.HttpContext,SingleClin.API.Middleware.RateLimitInfo)">
            <summary>
            Handle rate limit exceeded response
            </summary>
        </member>
        <member name="T:SingleClin.API.Middleware.RateLimitInfo">
            <summary>
            Rate limit information for a clinic
            </summary>
        </member>
        <member name="T:SingleClin.API.Middleware.FirebaseAuthenticationMiddleware">
            <summary>
            Middleware to validate Firebase tokens and convert them to internal JWT tokens
            </summary>
        </member>
        <member name="T:SingleClin.API.Middleware.FirebaseAuthenticationMiddlewareExtensions">
            <summary>
            Extension methods for Firebase authentication middleware
            </summary>
        </member>
        <member name="M:SingleClin.API.Middleware.FirebaseAuthenticationMiddlewareExtensions.UseFirebaseAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Adds Firebase authentication middleware to the pipeline
            </summary>
        </member>
        <member name="T:SingleClin.API.Migrations.AddClinicImages">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.AddClinicImages.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.AddClinicImages.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.AddClinicImages.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Migrations.FixServiceIsActiveColumn">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.FixServiceIsActiveColumn.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.FixServiceIsActiveColumn.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.FixServiceIsActiveColumn.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Migrations.ApplicationDb.AddIdentityAndRefreshTokens">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddIdentityAndRefreshTokens.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddIdentityAndRefreshTokens.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddIdentityAndRefreshTokens.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Migrations.ApplicationDb.AddLastLoginAtToApplicationUser">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddLastLoginAtToApplicationUser.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddLastLoginAtToApplicationUser.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddLastLoginAtToApplicationUser.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Migrations.ApplicationDb.FixPendingChanges">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.FixPendingChanges.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.FixPendingChanges.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.FixPendingChanges.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Migrations.ApplicationDb.AddFirebaseUidToUser">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddFirebaseUidToUser.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddFirebaseUidToUser.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddFirebaseUidToUser.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Migrations.ApplicationDb.SyncModels">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.SyncModels.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.SyncModels.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.SyncModels.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Migrations.ApplicationDb.AddApplicationUserIdToUser">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddApplicationUserIdToUser.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddApplicationUserIdToUser.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddApplicationUserIdToUser.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Migrations.ApplicationDb.AddClinicImagesTableFixed">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddClinicImagesTableFixed.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddClinicImagesTableFixed.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddClinicImagesTableFixed.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Migrations.ApplicationDb.SyncClinicServicesModel">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.SyncClinicServicesModel.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.SyncClinicServicesModel.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.SyncClinicServicesModel.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Migrations.ApplicationDb.CreateClinicServicesTable">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.CreateClinicServicesTable.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.CreateClinicServicesTable.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.CreateClinicServicesTable.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Migrations.ApplicationDb.ForceCreateClinicServicesTable">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.ForceCreateClinicServicesTable.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.ForceCreateClinicServicesTable.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.ForceCreateClinicServicesTable.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Migrations.ApplicationDb.CreateClinicServicesTableActual">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.CreateClinicServicesTableActual.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.CreateClinicServicesTableActual.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Migrations.ApplicationDb.AddCreditCostToServices">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddCreditCostToServices.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SingleClin.API.Migrations.ApplicationDb.AddCreditCostToServices.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SingleClin.API.Repositories.ClinicRepository">
            <summary>
            Repository implementation for Clinic entity operations
            </summary>
        </member>
        <member name="T:SingleClin.API.Repositories.IClinicRepository">
            <summary>
            Repository contract for Clinic entity operations
            </summary>
        </member>
        <member name="M:SingleClin.API.Repositories.IClinicRepository.GetAllAsync(System.Int32,System.Int32,System.Nullable{System.Boolean},System.Nullable{SingleClin.API.Data.Models.Enums.ClinicType},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Get all clinics with pagination and filtering
            </summary>
            <param name="pageNumber">Page number (1-based)</param>
            <param name="pageSize">Number of items per page</param>
            <param name="isActive">Filter by active status (null for all)</param>
            <param name="type">Filter by clinic type (null for all)</param>
            <param name="searchTerm">Search term for name or address</param>
            <param name="city">Filter by city</param>
            <param name="state">Filter by state</param>
            <param name="sortBy">Field to sort by</param>
            <param name="sortDirection">Sort direction (asc or desc)</param>
            <returns>Paginated list of clinics</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IClinicRepository.GetByIdAsync(System.Guid)">
            <summary>
            Get clinic by ID
            </summary>
            <param name="id">Clinic ID</param>
            <returns>Clinic if found, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IClinicRepository.GetByNameAsync(System.String)">
            <summary>
            Get clinic by name
            </summary>
            <param name="name">Clinic name</param>
            <returns>Clinic if found, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IClinicRepository.GetByCnpjAsync(System.String)">
            <summary>
            Get clinic by CNPJ
            </summary>
            <param name="cnpj">Clinic CNPJ</param>
            <returns>Clinic if found, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IClinicRepository.GetActiveAsync">
            <summary>
            Get all active clinics ordered by name
            </summary>
            <returns>List of active clinics</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IClinicRepository.CreateAsync(SingleClin.API.Data.Models.Clinic)">
            <summary>
            Create a new clinic
            </summary>
            <param name="clinic">Clinic to create</param>
            <returns>Created clinic</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IClinicRepository.UpdateAsync(SingleClin.API.Data.Models.Clinic)">
            <summary>
            Update an existing clinic
            </summary>
            <param name="clinic">Clinic to update</param>
            <returns>Updated clinic</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IClinicRepository.DeleteAsync(System.Guid)">
            <summary>
            Delete a clinic (soft delete)
            </summary>
            <param name="id">Clinic ID to delete</param>
            <returns>True if deleted, false if not found</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IClinicRepository.NameExistsAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Check if clinic name exists (for validation)
            </summary>
            <param name="name">Clinic name to check</param>
            <param name="excludeId">Clinic ID to exclude from check (for updates)</param>
            <returns>True if name exists, false otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IClinicRepository.CnpjExistsAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Check if CNPJ exists (for validation)
            </summary>
            <param name="cnpj">CNPJ to check</param>
            <param name="excludeId">Clinic ID to exclude from check (for updates)</param>
            <returns>True if CNPJ exists, false otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IClinicRepository.GetCountsByStatusAndTypeAsync">
            <summary>
            Get clinics count by status and type
            </summary>
            <returns>Dictionary with counts</returns>
        </member>
        <member name="T:SingleClin.API.Repositories.IPlanRepository">
            <summary>
            Repository contract for Plan entity operations
            </summary>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.GetAllAsync(System.Int32,System.Int32,System.Nullable{System.Boolean},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Get all plans with pagination and filtering
            </summary>
            <param name="pageNumber">Page number (1-based)</param>
            <param name="pageSize">Number of items per page</param>
            <param name="isActive">Filter by active status (null for all)</param>
            <param name="searchTerm">Search term for name or description</param>
            <param name="minPrice">Minimum price filter</param>
            <param name="maxPrice">Maximum price filter</param>
            <param name="isFeatured">Filter by featured status (null for all)</param>
            <param name="minCredits">Minimum credits filter</param>
            <param name="maxCredits">Maximum credits filter</param>
            <param name="sortBy">Field to sort by</param>
            <param name="sortDirection">Sort direction (asc or desc)</param>
            <returns>Paginated list of plans</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.GetByIdAsync(System.Guid)">
            <summary>
            Get plan by ID
            </summary>
            <param name="id">Plan ID</param>
            <returns>Plan if found, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.GetByNameAsync(System.String)">
            <summary>
            Get plan by name
            </summary>
            <param name="name">Plan name</param>
            <returns>Plan if found, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.GetActiveAsync">
            <summary>
            Get all active plans ordered by display order
            </summary>
            <returns>List of active plans</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.CreateAsync(SingleClin.API.Data.Models.Plan)">
            <summary>
            Create a new plan
            </summary>
            <param name="plan">Plan to create</param>
            <returns>Created plan</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.UpdateAsync(SingleClin.API.Data.Models.Plan)">
            <summary>
            Update an existing plan
            </summary>
            <param name="plan">Plan to update</param>
            <returns>Updated plan</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.DeleteAsync(System.Guid)">
            <summary>
            Delete a plan (soft delete)
            </summary>
            <param name="id">Plan ID to delete</param>
            <returns>True if deleted, false if not found</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.NameExistsAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Check if plan name exists (for validation)
            </summary>
            <param name="name">Plan name to check</param>
            <param name="excludeId">Plan ID to exclude from check (for updates)</param>
            <returns>True if name exists, false otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.IPlanRepository.GetCountsByStatusAsync">
            <summary>
            Get plans count by status
            </summary>
            <returns>Dictionary with status counts</returns>
        </member>
        <member name="T:SingleClin.API.Repositories.ITransactionRepository">
            <summary>
            Interface for transaction data access operations
            </summary>
        </member>
        <member name="M:SingleClin.API.Repositories.ITransactionRepository.GetTransactionsAsync(SingleClin.API.DTOs.Transaction.TransactionFilterDto)">
            <summary>
            Get paginated list of transactions with filtering
            </summary>
            <param name="filter">Filter parameters</param>
            <returns>Paginated transaction list</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.ITransactionRepository.GetTransactionByIdAsync(System.Guid)">
            <summary>
            Get transaction by ID with related data
            </summary>
            <param name="id">Transaction ID</param>
            <returns>Transaction with related entities</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.ITransactionRepository.CreateTransactionAsync(SingleClin.API.Data.Models.Transaction)">
            <summary>
            Create a new transaction
            </summary>
            <param name="transaction">Transaction entity to create</param>
            <returns>Created transaction</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.ITransactionRepository.UpdateTransactionAsync(SingleClin.API.Data.Models.Transaction)">
            <summary>
            Update an existing transaction
            </summary>
            <param name="transaction">Transaction entity to update</param>
            <returns>Updated transaction</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.ITransactionRepository.GetClinicTransactionsAsync(System.Guid,System.Int32,System.Int32)">
            <summary>
            Get transactions for a specific clinic
            </summary>
            <param name="clinicId">Clinic ID</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <returns>Paginated clinic transactions</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.ITransactionRepository.GetPatientTransactionsAsync(System.Guid,System.Int32,System.Int32)">
            <summary>
            Get transactions for a specific patient
            </summary>
            <param name="patientId">Patient (User) ID</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <returns>Paginated patient transactions</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.ITransactionRepository.GetDashboardMetricsAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get dashboard metrics
            </summary>
            <param name="startDate">Start date filter (optional)</param>
            <param name="endDate">End date filter (optional)</param>
            <returns>Dashboard metrics</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.ITransactionRepository.GetTransactionsForExportAsync(SingleClin.API.DTOs.Transaction.TransactionFilterDto)">
            <summary>
            Get transactions for export
            </summary>
            <param name="filter">Filter parameters</param>
            <returns>All matching transactions for export</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.ITransactionRepository.CanCancelTransactionAsync(System.Guid)">
            <summary>
            Check if transaction can be cancelled
            </summary>
            <param name="transactionId">Transaction ID</param>
            <returns>True if can be cancelled</returns>
        </member>
        <member name="M:SingleClin.API.Repositories.ITransactionRepository.GetTransactionStatisticsAsync(System.DateTime,System.DateTime)">
            <summary>
            Get transaction statistics for a date range
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <returns>Statistics object</returns>
        </member>
        <member name="T:SingleClin.API.Repositories.PlanRepository">
            <summary>
            Repository implementation for Plan entity operations
            </summary>
        </member>
        <member name="M:SingleClin.API.Repositories.PlanRepository.ApplySorting(System.Linq.IQueryable{SingleClin.API.Data.Models.Plan},System.String,System.String)">
            <summary>
            Apply dynamic sorting to the query based on sort field and direction
            </summary>
            <param name="query">The query to sort</param>
            <param name="sortBy">Field to sort by</param>
            <param name="sortDirection">Sort direction (asc or desc)</param>
            <returns>Sorted query</returns>
        </member>
        <member name="T:SingleClin.API.Repositories.TransactionRepository">
            <summary>
            Repository for transaction data access operations
            </summary>
        </member>
        <member name="T:SingleClin.API.Scripts.ApplyProdMigration">
            <summary>
            Script para aplicar a migration credit_cost em produção
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.AppointmentService">
            <summary>
            Service for managing appointments and credit debit operations
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.AuthService">
            <summary>
            Service for handling authentication operations
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.AzureCommunicationService">
            <summary>
            Azure Communication Services email implementation
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.ClaimsTransformationService">
            <summary>
            Service for transforming and adding claims dynamically during authentication
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.ClinicService">
            <summary>
            Service implementation for Clinic business logic
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ClinicService.UpdateImageAsync(System.Guid,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Update clinic image
            </summary>
            <param name="id">Clinic ID</param>
            <param name="imageFile">Image file to upload</param>
            <returns>Updated clinic with new image</returns>
        </member>
        <member name="M:SingleClin.API.Services.ClinicService.DeleteImageAsync(System.Guid)">
            <summary>
            Delete clinic image
            </summary>
            <param name="id">Clinic ID</param>
            <returns>Updated clinic without image</returns>
        </member>
        <member name="M:SingleClin.API.Services.ClinicService.NormalizeServicePrice(System.Decimal)">
            <summary>
            Normalizes service prices to ensure they are stored correctly in SG format.
            Prevents multiplication by 10 and ensures proper SG values (1.0, 2.0, 3.0, etc.)
            </summary>
            <param name="price">The input price to normalize</param>
            <returns>The normalized price in SG format</returns>
        </member>
        <member name="T:SingleClin.API.Services.CreditValidationService">
            <summary>
            Service for validating user credits and plan information
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.EmailTemplateService">
            <summary>
            Service for processing and rendering email templates
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.EmailTemplateService.ProcessTemplate(System.String,System.Object)">
            <summary>
            Processes template content by replacing variables with actual values
            </summary>
            <param name="template">Template content</param>
            <param name="data">Data object to extract values from</param>
            <returns>Processed template content</returns>
        </member>
        <member name="M:SingleClin.API.Services.EmailTemplateService.ProcessConditionalBlocks(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Processes conditional blocks in templates
            </summary>
            <param name="template">Template content</param>
            <param name="properties">Property dictionary</param>
            <returns>Processed template</returns>
        </member>
        <member name="M:SingleClin.API.Services.EmailTemplateService.GetObjectProperties(System.Object)">
            <summary>
            Extracts properties from an object into a dictionary
            </summary>
            <param name="obj">Object to extract properties from</param>
            <returns>Dictionary of property name-value pairs</returns>
        </member>
        <member name="M:SingleClin.API.Services.EmailTemplateService.GenerateUserConfirmationSubject(SingleClin.API.DTOs.EmailTemplate.UserConfirmationTemplateData)">
            <summary>
            Generates subject line for user confirmation emails
            </summary>
            <param name="templateData">Template data</param>
            <returns>Generated subject line</returns>
        </member>
        <member name="M:SingleClin.API.Services.EmailTemplateService.GenerateLowBalanceSubject(SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData)">
            <summary>
            Generates subject line for low balance notifications
            </summary>
            <param name="templateData">Template data</param>
            <returns>Generated subject line</returns>
        </member>
        <member name="T:SingleClin.API.Services.ExportService">
            <summary>
            Service for exporting reports to various formats
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.FirebaseAuthService">
            <summary>
            Service for Firebase authentication operations
            </summary>
        </member>
        <member name="P:SingleClin.API.Services.FirebaseAuthService.IsConfigured">
            <summary>
            Check if Firebase is properly configured
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.IAppointmentService">
            <summary>
            Interface for appointment service
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IAppointmentService.ScheduleAppointmentAsync(System.Guid,SingleClin.API.DTOs.Appointment.AppointmentScheduleDto)">
            <summary>
            Schedule a new appointment
            </summary>
            <param name="userId">User ID</param>
            <param name="scheduleDto">Appointment schedule data</param>
            <returns>Appointment summary with confirmation details</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAppointmentService.ConfirmAppointmentAsync(System.Guid,SingleClin.API.DTOs.Appointment.AppointmentConfirmationDto)">
            <summary>
            Confirm a scheduled appointment and debit credits
            </summary>
            <param name="userId">User ID</param>
            <param name="confirmationDto">Confirmation data</param>
            <returns>Confirmed appointment details</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAppointmentService.GetAppointmentByIdAsync(System.Guid,System.Guid)">
            <summary>
            Get appointment by ID
            </summary>
            <param name="userId">User ID</param>
            <param name="appointmentId">Appointment ID</param>
            <returns>Appointment details</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAppointmentService.GetUserAppointmentsAsync(System.Guid,System.Boolean)">
            <summary>
            Get user's appointments
            </summary>
            <param name="userId">User ID</param>
            <param name="includeCompleted">Include completed appointments</param>
            <returns>List of appointments</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAppointmentService.CancelAppointmentAsync(System.Guid,System.Guid,System.String)">
            <summary>
            Cancel an appointment
            </summary>
            <param name="userId">User ID</param>
            <param name="appointmentId">Appointment ID</param>
            <param name="reason">Cancellation reason</param>
            <returns>Success status and updated appointment</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAppointmentService.CompleteAppointmentAsync(System.Guid,System.Guid)">
            <summary>
            Complete an appointment (for clinic use)
            </summary>
            <param name="appointmentId">Appointment ID</param>
            <param name="clinicId">Clinic ID</param>
            <returns>Success status and updated appointment</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAppointmentService.GetAppointmentByTokenAsync(System.String)">
            <summary>
            Get appointments by confirmation token
            </summary>
            <param name="confirmationToken">Confirmation token</param>
            <returns>Appointment summary</returns>
        </member>
        <member name="T:SingleClin.API.Services.IAuthService">
            <summary>
            Service interface for authentication operations
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.RegisterAsync(SingleClin.API.DTOs.Auth.RegisterDto,System.String)">
            <summary>
            Register a new user
            </summary>
            <param name="registerDto">Registration data</param>
            <param name="ipAddress">Client IP address</param>
            <returns>Authentication response with tokens</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.LoginAsync(SingleClin.API.DTOs.Auth.LoginDto,System.String)">
            <summary>
            Authenticate a user with email and password
            </summary>
            <param name="loginDto">Login credentials</param>
            <param name="ipAddress">Client IP address</param>
            <returns>Authentication response with tokens</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.RefreshTokenAsync(System.String,System.String)">
            <summary>
            Refresh access token using refresh token
            </summary>
            <param name="refreshToken">Refresh token</param>
            <param name="ipAddress">Client IP address</param>
            <returns>New authentication response with tokens</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.LogoutAsync(System.Guid,System.String)">
            <summary>
            Logout user by invalidating refresh token
            </summary>
            <param name="userId">User ID</param>
            <param name="refreshToken">Current refresh token to invalidate</param>
            <returns>Success status</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.RevokeAllUserTokensAsync(System.Guid)">
            <summary>
            Revoke all refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <returns>Number of tokens revoked</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.CleanupExpiredTokensAsync">
            <summary>
            Clean up expired refresh tokens
            </summary>
            <returns>Number of tokens removed</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.SocialLoginAsync(SingleClin.API.DTOs.Auth.SocialLoginDto,System.String)">
            <summary>
            Authenticate a user with social login
            </summary>
            <param name="socialLoginDto">Social login data</param>
            <param name="ipAddress">Client IP address</param>
            <returns>Authentication response with tokens</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.GetUserClaimsAsync(System.Guid)">
            <summary>
            Get user claims for authenticated user
            </summary>
            <param name="userId">User ID</param>
            <returns>Dictionary of user claims</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.FirebaseLoginAsync(SingleClin.API.DTOs.Auth.FirebaseLoginDto,System.String)">
            <summary>
            Authenticate a user with Firebase token
            </summary>
            <param name="firebaseLoginDto">Firebase login data</param>
            <param name="ipAddress">Client IP address</param>
            <returns>Authentication response with tokens</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAuthService.SyncUserWithBackendAsync(SingleClin.API.DTOs.Auth.SyncUserDto,System.String)">
            <summary>
            Sync Firebase user with backend database
            </summary>
            <param name="syncUserDto">Firebase user sync data</param>
            <param name="ipAddress">Client IP address</param>
            <returns>User response data</returns>
        </member>
        <member name="T:SingleClin.API.Services.IAzureCommunicationService">
            <summary>
            Interface for Azure Communication Services email functionality
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IAzureCommunicationService.SendEmailAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Send an email using Azure Communication Services
            </summary>
            <param name="to">Recipient email address</param>
            <param name="subject">Email subject</param>
            <param name="htmlContent">HTML content (optional)</param>
            <param name="textContent">Plain text content</param>
            <param name="fromEmail">Sender email address (optional, uses default if not provided)</param>
            <param name="fromName">Sender name (optional, uses default if not provided)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the send operation</returns>
        </member>
        <member name="M:SingleClin.API.Services.IAzureCommunicationService.SendEmailAsync(System.String,SingleClin.API.DTOs.EmailTemplate.RenderedEmailTemplate,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Send a rendered email template using Azure Communication Services
            </summary>
            <param name="to">Recipient email address</param>
            <param name="renderedTemplate">Rendered email template</param>
            <param name="fromEmail">Sender email address (optional, uses default if not provided)</param>
            <param name="fromName">Sender name (optional, uses default if not provided)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the send operation</returns>
        </member>
        <member name="T:SingleClin.API.Services.IClinicService">
            <summary>
            Service contract for Clinic business logic
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.GetAllAsync(SingleClin.API.DTOs.Clinic.ClinicFilterDto)">
            <summary>
            Get all clinics with pagination and filtering
            </summary>
            <param name="filter">Filter criteria</param>
            <returns>Paginated list of clinics</returns>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.GetByIdAsync(System.Guid)">
            <summary>
            Get clinic by ID
            </summary>
            <param name="id">Clinic ID</param>
            <returns>Clinic if found, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.GetActiveAsync">
            <summary>
            Get all active clinics
            </summary>
            <returns>List of active clinics</returns>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.CreateAsync(SingleClin.API.DTOs.Clinic.ClinicRequestDto)">
            <summary>
            Create a new clinic
            </summary>
            <param name="clinicRequest">Clinic data</param>
            <returns>Created clinic</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when clinic name or CNPJ already exists</exception>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.UpdateAsync(System.Guid,SingleClin.API.DTOs.Clinic.ClinicRequestDto)">
            <summary>
            Update an existing clinic
            </summary>
            <param name="id">Clinic ID</param>
            <param name="clinicRequest">Updated clinic data</param>
            <returns>Updated clinic</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when clinic not found or name/CNPJ already exists</exception>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.DeleteAsync(System.Guid)">
            <summary>
            Delete a clinic (soft delete)
            </summary>
            <param name="id">Clinic ID</param>
            <returns>True if deleted, false if not found</returns>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.ToggleStatusAsync(System.Guid)">
            <summary>
            Toggle clinic active status
            </summary>
            <param name="id">Clinic ID</param>
            <returns>Updated clinic with new status</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when clinic not found</exception>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.GetStatisticsAsync">
            <summary>
            Get statistics about clinics
            </summary>
            <returns>Dictionary with clinic statistics</returns>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.ValidateAsync(SingleClin.API.DTOs.Clinic.ClinicRequestDto,System.Nullable{System.Guid})">
            <summary>
            Validate clinic data
            </summary>
            <param name="clinicRequest">Clinic data to validate</param>
            <param name="excludeId">Clinic ID to exclude from uniqueness checks (for updates)</param>
            <returns>List of validation errors</returns>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.UpdateImageAsync(System.Guid,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Update clinic image (DEPRECATED - use multiple image methods)
            </summary>
            <param name="id">Clinic ID</param>
            <param name="imageFile">Image file to upload</param>
            <returns>Updated clinic with new image</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when clinic not found or image upload fails</exception>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.DeleteImageAsync(System.Guid)">
            <summary>
            Delete clinic image (DEPRECATED - use multiple image methods)
            </summary>
            <param name="id">Clinic ID</param>
            <returns>Updated clinic without image</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when clinic not found</exception>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.AddImagesAsync(System.Guid,SingleClin.API.DTOs.Clinic.MultipleImageUploadDto)">
            <summary>
            Add multiple images to a clinic
            </summary>
            <param name="clinicId">Clinic ID</param>
            <param name="uploadDto">Multiple images upload data</param>
            <returns>Upload response with results</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when clinic not found</exception>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.GetImagesAsync(System.Guid)">
            <summary>
            Get all images for a clinic
            </summary>
            <param name="clinicId">Clinic ID</param>
            <returns>List of clinic images</returns>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.UpdateImageAsync(System.Guid,System.Guid,SingleClin.API.DTOs.Clinic.ClinicImageUpdateDto)">
            <summary>
            Update image properties (metadata only, not the file)
            </summary>
            <param name="clinicId">Clinic ID</param>
            <param name="imageId">Image ID</param>
            <param name="updateDto">Updated image data</param>
            <returns>Updated image</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when clinic or image not found</exception>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.DeleteImageAsync(System.Guid,System.Guid)">
            <summary>
            Delete a specific image from a clinic
            </summary>
            <param name="clinicId">Clinic ID</param>
            <param name="imageId">Image ID</param>
            <returns>True if deleted, false if not found</returns>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.SetFeaturedImageAsync(System.Guid,System.Guid)">
            <summary>
            Set featured image for a clinic
            </summary>
            <param name="clinicId">Clinic ID</param>
            <param name="imageId">Image ID to set as featured</param>
            <returns>Updated image</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when clinic or image not found</exception>
        </member>
        <member name="M:SingleClin.API.Services.IClinicService.ReorderImagesAsync(System.Guid,System.Collections.Generic.Dictionary{System.Guid,System.Int32})">
            <summary>
            Reorder clinic images
            </summary>
            <param name="clinicId">Clinic ID</param>
            <param name="imageOrders">Dictionary of image ID to display order</param>
            <returns>List of updated images</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when clinic not found</exception>
        </member>
        <member name="T:SingleClin.API.Services.ICreditValidationService">
            <summary>
            Interface for credit validation service
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ICreditValidationService.ValidateUserCreditsAsync(System.Guid,System.Int32)">
            <summary>
            Validate if user has sufficient credits for a service
            </summary>
            <param name="userId">User ID</param>
            <param name="creditsRequired">Credits required for the service</param>
            <returns>Validation result with success status and available credits</returns>
        </member>
        <member name="M:SingleClin.API.Services.ICreditValidationService.GetAvailableCreditsAsync(System.Guid)">
            <summary>
            Get user's total available credits across all active plans
            </summary>
            <param name="userId">User ID</param>
            <returns>Total available credits</returns>
        </member>
        <member name="M:SingleClin.API.Services.ICreditValidationService.GetUserActivePlansAsync(System.Guid)">
            <summary>
            Get user's active plans with credit information
            </summary>
            <param name="userId">User ID</param>
            <returns>List of active user plans with credit details</returns>
        </member>
        <member name="M:SingleClin.API.Services.ICreditValidationService.HasActivePlansAsync(System.Guid)">
            <summary>
            Check if user has any active plans
            </summary>
            <param name="userId">User ID</param>
            <returns>True if user has active plans</returns>
        </member>
        <member name="T:SingleClin.API.Services.IEmailTemplateService">
            <summary>
            Service for processing and rendering email templates
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IEmailTemplateService.RenderUserConfirmationAsync(SingleClin.API.DTOs.EmailTemplate.UserConfirmationTemplateData,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Renders a user confirmation email template
            </summary>
            <param name="templateData">Data to populate the template</param>
            <param name="includeHtml">Whether to include HTML version</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Rendered email template</returns>
        </member>
        <member name="M:SingleClin.API.Services.IEmailTemplateService.RenderLowBalanceNotificationAsync(SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Renders a low balance notification email template
            </summary>
            <param name="templateData">Data to populate the template</param>
            <param name="includeHtml">Whether to include HTML version</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Rendered email template</returns>
        </member>
        <member name="M:SingleClin.API.Services.IEmailTemplateService.RenderTemplateAsync(System.String,System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Renders any email template with provided data
            </summary>
            <param name="templateName">Template file name (without extension)</param>
            <param name="templateData">Data to populate the template</param>
            <param name="includeHtml">Whether to include HTML version</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Rendered email template</returns>
        </member>
        <member name="M:SingleClin.API.Services.IEmailTemplateService.GetHtmlTemplateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the HTML template content
            </summary>
            <param name="templateName">Template name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>HTML template content</returns>
        </member>
        <member name="M:SingleClin.API.Services.IEmailTemplateService.GetTextTemplateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the plain text template content
            </summary>
            <param name="templateName">Template name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Plain text template content</returns>
        </member>
        <member name="T:SingleClin.API.Services.IExportService">
            <summary>
            Service for exporting reports to various formats
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IExportService.ExportToExcelAsync``1(SingleClin.API.DTOs.Report.ReportResponse{``0},SingleClin.API.DTOs.Export.ExportRequest,System.Threading.CancellationToken)">
            <summary>
            Export report to Excel format
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IExportService.ExportToPdfAsync``1(SingleClin.API.DTOs.Report.ReportResponse{``0},SingleClin.API.DTOs.Export.ExportRequest,System.Threading.CancellationToken)">
            <summary>
            Export report to PDF format
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IExportService.ExportMultipleToExcelAsync(System.Collections.Generic.Dictionary{System.String,System.Object},SingleClin.API.DTOs.Export.ExportRequest,System.Threading.CancellationToken)">
            <summary>
            Export multiple reports to a single Excel file with multiple sheets
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.IFirebaseAuthService">
            <summary>
            Service interface for Firebase authentication operations
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IFirebaseAuthService.VerifyIdTokenAsync(System.String)">
            <summary>
            Verify a Firebase ID token
            </summary>
            <param name="idToken">The Firebase ID token to verify</param>
            <returns>Firebase token information if valid, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Services.IFirebaseAuthService.GetUserAsync(System.String)">
            <summary>
            Get user information from Firebase
            </summary>
            <param name="uid">Firebase user ID</param>
            <returns>User record if found, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Services.IFirebaseAuthService.CreateCustomTokenAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a custom token for a user
            </summary>
            <param name="uid">User ID</param>
            <param name="claims">Optional custom claims</param>
            <returns>Custom token</returns>
        </member>
        <member name="M:SingleClin.API.Services.IFirebaseAuthService.DeleteUserAsync(System.String)">
            <summary>
            Delete a user from Firebase
            </summary>
            <param name="uid">Firebase user ID</param>
            <returns>Success status</returns>
        </member>
        <member name="P:SingleClin.API.Services.IFirebaseAuthService.IsConfigured">
            <summary>
            Check if Firebase is properly configured
            </summary>
            <returns>True if Firebase is configured, false otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Services.IFirebaseAuthService.CreateUserAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a new user in Firebase Authentication
            </summary>
            <param name="email">User email</param>
            <param name="password">User password</param>
            <param name="displayName">User display name</param>
            <param name="emailVerified">Whether email is verified</param>
            <returns>Created user record</returns>
        </member>
        <member name="M:SingleClin.API.Services.IFirebaseAuthService.UpdateUserAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Update a user in Firebase Authentication
            </summary>
            <param name="uid">Firebase user ID</param>
            <param name="email">New email (optional)</param>
            <param name="password">New password (optional)</param>
            <param name="displayName">New display name (optional)</param>
            <param name="emailVerified">New email verified status (optional)</param>
            <returns>Updated user record</returns>
        </member>
        <member name="M:SingleClin.API.Services.IFirebaseAuthService.GetUserByEmailAsync(System.String)">
            <summary>
            Get user by email from Firebase
            </summary>
            <param name="email">User email</param>
            <returns>User record if found, null otherwise</returns>
        </member>
        <member name="T:SingleClin.API.Services.IImageUploadService">
            <summary>
            Service interface for handling image uploads to Azure Blob Storage
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IImageUploadService.UploadImageAsync(Microsoft.AspNetCore.Http.IFormFile,System.String,System.Threading.CancellationToken)">
            <summary>
            Upload an image file to Azure Blob Storage
            </summary>
            <param name="file">The image file to upload</param>
            <param name="folder">The folder/container to upload to</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Upload result with file details</returns>
        </member>
        <member name="M:SingleClin.API.Services.IImageUploadService.DeleteImageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Delete an image file from Azure Blob Storage
            </summary>
            <param name="fileName">Name of the file to delete</param>
            <param name="folder">The folder/container where the file is located</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if deletion was successful</returns>
        </member>
        <member name="M:SingleClin.API.Services.IImageUploadService.GetImageUrlAsync(System.String,System.String)">
            <summary>
            Get the public URL for an image
            </summary>
            <param name="fileName">Name of the file</param>
            <param name="folder">The folder/container where the file is located</param>
            <returns>Public URL of the image</returns>
        </member>
        <member name="M:SingleClin.API.Services.IImageUploadService.ValidateImageAsync(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Validate an image file before upload
            </summary>
            <param name="file">The image file to validate</param>
            <returns>True if the file is valid for upload</returns>
        </member>
        <member name="T:SingleClin.API.Services.ImageUploadResult">
            <summary>
            Result of an image upload operation
            </summary>
        </member>
        <member name="P:SingleClin.API.Services.ImageUploadResult.Success">
            <summary>
            Indicates if the upload was successful
            </summary>
        </member>
        <member name="P:SingleClin.API.Services.ImageUploadResult.FileName">
            <summary>
            Generated file name in storage
            </summary>
        </member>
        <member name="P:SingleClin.API.Services.ImageUploadResult.Url">
            <summary>
            Public URL of the uploaded image
            </summary>
        </member>
        <member name="P:SingleClin.API.Services.ImageUploadResult.Size">
            <summary>
            Size of the uploaded file in bytes
            </summary>
        </member>
        <member name="P:SingleClin.API.Services.ImageUploadResult.ContentType">
            <summary>
            Content type (MIME type) of the uploaded file
            </summary>
        </member>
        <member name="P:SingleClin.API.Services.ImageUploadResult.ErrorMessage">
            <summary>
            Error message if upload failed
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ImageUploadResult.CreateSuccess(System.String,System.String,System.Int64,System.String)">
            <summary>
            Create a successful upload result
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ImageUploadResult.CreateFailure(System.String)">
            <summary>
            Create a failed upload result
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.ImageMigrationService">
            <summary>
            Service to migrate existing image URLs to use SAS tokens
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ImageMigrationService.UpdateImageUrlsAsync">
            <summary>
            Update all clinic images to use fresh SAS URLs
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ImageMigrationService.UpdateClinicImageUrlsAsync(System.Guid)">
            <summary>
            Update URLs for a specific clinic's images
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.ImageUploadService">
            <summary>
            Service implementation for handling image uploads to Azure Blob Storage
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.IPlanService">
            <summary>
            Service contract for Plan business logic
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.GetAllAsync(SingleClin.API.DTOs.Plan.PlanFilterDto)">
            <summary>
            Get all plans with pagination and filtering
            </summary>
            <param name="filter">Filter criteria</param>
            <returns>Paginated list of plans</returns>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.GetByIdAsync(System.Guid)">
            <summary>
            Get plan by ID
            </summary>
            <param name="id">Plan ID</param>
            <returns>Plan if found, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.GetActiveAsync">
            <summary>
            Get all active plans
            </summary>
            <returns>List of active plans</returns>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.CreateAsync(SingleClin.API.DTOs.Plan.PlanRequestDto)">
            <summary>
            Create a new plan
            </summary>
            <param name="planRequest">Plan data</param>
            <returns>Created plan</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when plan name already exists</exception>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.UpdateAsync(System.Guid,SingleClin.API.DTOs.Plan.PlanRequestDto)">
            <summary>
            Update an existing plan
            </summary>
            <param name="id">Plan ID</param>
            <param name="planRequest">Updated plan data</param>
            <returns>Updated plan</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when plan not found or name already exists</exception>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.DeleteAsync(System.Guid)">
            <summary>
            Delete a plan (soft delete)
            </summary>
            <param name="id">Plan ID</param>
            <returns>True if deleted, false if not found</returns>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.GetStatisticsAsync">
            <summary>
            Get statistics about plans
            </summary>
            <returns>Dictionary with plan statistics</returns>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.ValidateAsync(SingleClin.API.DTOs.Plan.PlanRequestDto,System.Nullable{System.Guid})">
            <summary>
            Validate plan data
            </summary>
            <param name="planRequest">Plan data to validate</param>
            <param name="excludeId">Plan ID to exclude from uniqueness checks (for updates)</param>
            <returns>List of validation errors</returns>
        </member>
        <member name="M:SingleClin.API.Services.IPlanService.GetUserPlanByIdAsync(System.Guid)">
            <summary>
            Get user plan by ID
            </summary>
            <param name="id">User plan ID</param>
            <returns>User plan with related data</returns>
        </member>
        <member name="T:SingleClin.API.Services.IQRCodeGeneratorService">
            <summary>
            Interface for QR Code image generation
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IQRCodeGeneratorService.GenerateQRCode(System.String,System.Int32)">
            <summary>
            Generate QR Code as Data URL from JWT token
            </summary>
            <param name="token">JWT token to embed in QR Code</param>
            <param name="size">QR Code size in pixels (default: 300)</param>
            <returns>QR Code as Data URL string</returns>
        </member>
        <member name="M:SingleClin.API.Services.IQRCodeGeneratorService.GenerateQRCodeBytes(System.String,System.Int32)">
            <summary>
            Generate QR Code as byte array from JWT token
            </summary>
            <param name="token">JWT token to embed in QR Code</param>
            <param name="size">QR Code size in pixels (default: 300)</param>
            <returns>QR Code as PNG byte array</returns>
        </member>
        <member name="T:SingleClin.API.Services.QRCodePayload">
            <summary>
            QR Code payload structure
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.IQRCodeService">
            <summary>
            Interface for QR Code orchestration service
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IQRCodeService.GenerateQRCodeAsync(System.Guid,System.String,System.Int32,System.Int32)">
            <summary>
            Generate complete QR Code for a user plan
            </summary>
            <param name="userPlanId">User plan ID</param>
            <param name="userId">User ID</param>
            <param name="size">QR Code size in pixels</param>
            <param name="expirationMinutes">Token expiration in minutes</param>
            <returns>Complete QR Code data</returns>
        </member>
        <member name="M:SingleClin.API.Services.IQRCodeService.ValidateUserPlanAsync(System.Guid)">
            <summary>
            Validate user plan before QR Code generation
            </summary>
            <param name="userPlanId">User plan ID to validate</param>
            <returns>True if plan is valid for QR Code generation</returns>
        </member>
        <member name="M:SingleClin.API.Services.IQRCodeService.GetMetricsAsync">
            <summary>
            Get QR Code generation metrics
            </summary>
            <returns>QR Code generation statistics</returns>
        </member>
        <member name="T:SingleClin.API.Services.QRCodeResult">
            <summary>
            QR Code generation result
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.QRCodeMetrics">
            <summary>
            QR Code generation metrics
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.IQRCodeTokenService">
            <summary>
            Interface for QR Code token generation and validation
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IQRCodeTokenService.GenerateTokenAsync(System.Guid,System.String,System.Int32)">
            <summary>
            Generate a JWT token for QR Code with unique nonce
            </summary>
            <param name="userPlanId">User plan ID for the token</param>
            <param name="userId">User ID for the token</param>
            <param name="expirationMinutes">Token expiration in minutes (default: 30)</param>
            <returns>JWT token string and nonce for QR Code</returns>
        </member>
        <member name="M:SingleClin.API.Services.IQRCodeTokenService.ValidateAndConsumeTokenAsync(System.String)">
            <summary>
            Validate and consume a QR Code token
            </summary>
            <param name="token">JWT token to validate</param>
            <returns>QR token claims if valid, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Services.IQRCodeTokenService.ParseTokenAsync(System.String)">
            <summary>
            Extract claims from token without consuming the nonce
            </summary>
            <param name="token">JWT token to parse</param>
            <returns>QR token claims if valid, null otherwise</returns>
        </member>
        <member name="T:SingleClin.API.Services.QRTokenClaims">
            <summary>
            QR Code token claims data
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.IQRCodeValidationService">
            <summary>
            Interface for QR Code validation service
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IQRCodeValidationService.ValidateQRCodeAsync(SingleClin.API.DTOs.QRCode.QRCodeValidateRequestDto)">
            <summary>
            Validate QR Code token and process transaction
            </summary>
            <param name="request">Validation request with QR token and clinic info</param>
            <returns>Validation result with transaction details</returns>
        </member>
        <member name="M:SingleClin.API.Services.IQRCodeValidationService.ParseQRCodeTokenAsync(System.String)">
            <summary>
            Parse QR Code token without consuming nonce (for preview/validation)
            </summary>
            <param name="qrToken">QR Code token to parse</param>
            <returns>Token claims if valid, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Services.IQRCodeValidationService.IsClinicAuthorizedAsync(System.Guid)">
            <summary>
            Check if clinic is authorized to validate QR codes
            </summary>
            <param name="clinicId">Clinic ID to validate</param>
            <returns>True if clinic is authorized</returns>
        </member>
        <member name="T:SingleClin.API.Services.IRedisService">
            <summary>
            Interface for Redis operations for QR Code nonce management
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IRedisService.StoreNonceAsync(System.String,System.String,System.Int32)">
            <summary>
            Store a nonce with expiration for QR Code generation
            </summary>
            <param name="nonce">Unique nonce identifier</param>
            <param name="userData">User data associated with the nonce</param>
            <param name="expirationMinutes">Expiration time in minutes (default: 30)</param>
            <returns>True if stored successfully</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRedisService.ConsumeNonceAsync(System.String)">
            <summary>
            Retrieve and consume (remove) a nonce from Redis
            </summary>
            <param name="nonce">Nonce to retrieve and consume</param>
            <returns>User data if nonce exists and is valid, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRedisService.NonceExistsAsync(System.String)">
            <summary>
            Check if a nonce exists without consuming it
            </summary>
            <param name="nonce">Nonce to check</param>
            <returns>True if nonce exists and is valid</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRedisService.GenerateNonce">
            <summary>
            Generate a new unique nonce
            </summary>
            <returns>Unique nonce string</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRedisService.IsConnectedAsync">
            <summary>
            Check Redis connection health
            </summary>
            <returns>True if connected to Redis</returns>
        </member>
        <member name="T:SingleClin.API.Services.IRefreshTokenService">
            <summary>
            Service interface for refresh token management
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IRefreshTokenService.CreateRefreshTokenAsync(System.Guid,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Create and store a new refresh token for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="ipAddress">Client IP address</param>
            <param name="deviceInfo">Device information</param>
            <param name="expirationDays">Token expiration in days</param>
            <returns>The created refresh token</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRefreshTokenService.ValidateRefreshTokenAsync(System.String)">
            <summary>
            Validate a refresh token and return the associated user ID
            </summary>
            <param name="token">Refresh token to validate</param>
            <returns>User ID if valid, null otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRefreshTokenService.RevokeTokenAsync(System.String)">
            <summary>
            Revoke a specific refresh token
            </summary>
            <param name="token">Token to revoke</param>
            <returns>Success status</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRefreshTokenService.RevokeAllUserTokensAsync(System.Guid)">
            <summary>
            Revoke all refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <returns>Number of tokens revoked</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRefreshTokenService.GetActiveUserTokensAsync(System.Guid)">
            <summary>
            Get active refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <returns>List of active refresh tokens</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRefreshTokenService.CleanupExpiredTokensAsync">
            <summary>
            Clean up expired refresh tokens
            </summary>
            <returns>Number of tokens removed</returns>
        </member>
        <member name="M:SingleClin.API.Services.IRefreshTokenService.UpdateDeviceInfoAsync(System.String,System.String)">
            <summary>
            Update device info for a refresh token
            </summary>
            <param name="token">Refresh token</param>
            <param name="deviceInfo">New device information</param>
            <returns>Success status</returns>
        </member>
        <member name="T:SingleClin.API.Services.IReportService">
            <summary>
            Interface for report generation service
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IReportService.GenerateReportAsync(SingleClin.API.DTOs.Report.ReportRequest,System.Threading.CancellationToken)">
            <summary>
            Generate a report based on the request parameters
            </summary>
            <param name="request">Report request parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Report response with data</returns>
        </member>
        <member name="M:SingleClin.API.Services.IReportService.GenerateUsageReportAsync(SingleClin.API.DTOs.Report.ReportRequest,System.Threading.CancellationToken)">
            <summary>
            Generate usage by period report
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IReportService.GenerateClinicRankingAsync(SingleClin.API.DTOs.Report.ReportRequest,System.Threading.CancellationToken)">
            <summary>
            Generate clinic ranking report
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IReportService.GenerateServiceReportAsync(SingleClin.API.DTOs.Report.ReportRequest,System.Threading.CancellationToken)">
            <summary>
            Generate top services report
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IReportService.GeneratePlanUtilizationAsync(SingleClin.API.DTOs.Report.ReportRequest,System.Threading.CancellationToken)">
            <summary>
            Generate plan utilization report
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IReportService.ExportReportAsync(System.Object,SingleClin.API.DTOs.Common.ExportFormat,System.Threading.CancellationToken)">
            <summary>
            Export report to specified format
            </summary>
            <param name="reportData">Report data to export</param>
            <param name="format">Export format</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>File content as byte array</returns>
        </member>
        <member name="M:SingleClin.API.Services.IReportService.GetAvailableReportTypesAsync(System.String)">
            <summary>
            Get available report types for user
            </summary>
            <param name="userRole">User role</param>
            <returns>List of available report types</returns>
        </member>
        <member name="M:SingleClin.API.Services.IReportService.ClearReportCacheAsync(System.Nullable{SingleClin.API.DTOs.Report.ReportType})">
            <summary>
            Clear cached report data
            </summary>
            <param name="reportType">Optional report type to clear</param>
        </member>
        <member name="T:SingleClin.API.Services.ReportTypeInfo">
            <summary>
            Report type information
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.ITransactionService">
            <summary>
            Interface for transaction business logic operations
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ITransactionService.GetTransactionsAsync(SingleClin.API.DTOs.Transaction.TransactionFilterDto)">
            <summary>
            Get paginated list of transactions with filtering
            </summary>
            <param name="filter">Filter parameters</param>
            <returns>Paginated transaction list</returns>
        </member>
        <member name="M:SingleClin.API.Services.ITransactionService.GetTransactionByIdAsync(System.Guid)">
            <summary>
            Get transaction by ID
            </summary>
            <param name="id">Transaction ID</param>
            <returns>Transaction response DTO</returns>
        </member>
        <member name="M:SingleClin.API.Services.ITransactionService.UpdateTransactionAsync(System.Guid,SingleClin.API.DTOs.Transaction.TransactionUpdateDto)">
            <summary>
            Update transaction details
            </summary>
            <param name="id">Transaction ID</param>
            <param name="updateDto">Update data</param>
            <returns>Updated transaction</returns>
        </member>
        <member name="M:SingleClin.API.Services.ITransactionService.CancelTransactionAsync(System.Guid,SingleClin.API.DTOs.Transaction.TransactionCancelDto,System.String)">
            <summary>
            Cancel transaction and optionally refund credits
            </summary>
            <param name="id">Transaction ID</param>
            <param name="cancelDto">Cancellation data</param>
            <param name="cancelledBy">User ID who cancelled</param>
            <returns>Cancelled transaction</returns>
        </member>
        <member name="M:SingleClin.API.Services.ITransactionService.GetDashboardMetricsAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get dashboard metrics
            </summary>
            <param name="startDate">Start date filter (optional)</param>
            <param name="endDate">End date filter (optional)</param>
            <returns>Dashboard metrics</returns>
        </member>
        <member name="M:SingleClin.API.Services.ITransactionService.ExportTransactionsAsync(SingleClin.API.DTOs.Transaction.TransactionFilterDto,System.String)">
            <summary>
            Export transactions to various formats
            </summary>
            <param name="filter">Filter parameters</param>
            <param name="format">Export format (excel, csv, pdf)</param>
            <returns>File bytes, filename and content type</returns>
        </member>
        <member name="M:SingleClin.API.Services.ITransactionService.GetClinicTransactionsAsync(System.Guid,System.Int32,System.Int32)">
            <summary>
            Get transactions for a specific clinic
            </summary>
            <param name="clinicId">Clinic ID</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <returns>Paginated clinic transactions</returns>
        </member>
        <member name="M:SingleClin.API.Services.ITransactionService.GetPatientTransactionsAsync(System.Guid,System.Int32,System.Int32)">
            <summary>
            Get transactions for a specific patient
            </summary>
            <param name="patientId">Patient (User) ID</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <returns>Paginated patient transactions</returns>
        </member>
        <member name="M:SingleClin.API.Services.ITransactionService.CanCancelTransactionAsync(System.Guid)">
            <summary>
            Validate if transaction can be cancelled
            </summary>
            <param name="id">Transaction ID</param>
            <returns>True if can be cancelled</returns>
        </member>
        <member name="M:SingleClin.API.Services.ITransactionService.GetTransactionStatisticsAsync(System.DateTime,System.DateTime)">
            <summary>
            Get transaction statistics for a date range
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <returns>Statistics object</returns>
        </member>
        <member name="M:SingleClin.API.Services.ITransactionService.RefundAppointmentCreditsAsync(System.Guid,System.String)">
            <summary>
            Refund credits for appointment cancellation
            </summary>
            <param name="transactionId">Transaction ID to refund</param>
            <param name="reason">Refund reason</param>
            <returns>Success status and updated transaction</returns>
        </member>
        <member name="T:SingleClin.API.Services.IUserService">
            <summary>
            Interface for user management service
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IUserService.GetUsersAsync(SingleClin.API.DTOs.User.UserFilterDto)">
            <summary>
            Get paginated list of users with filtering
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IUserService.GetUserByIdAsync(System.Guid)">
            <summary>
            Get user by ID
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IUserService.CreateUserAsync(SingleClin.API.DTOs.User.CreateUserDto)">
            <summary>
            Create new user
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IUserService.UpdateUserAsync(System.Guid,SingleClin.API.DTOs.User.UpdateUserDto)">
            <summary>
            Update user
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IUserService.DeleteUserAsync(System.Guid)">
            <summary>
            Delete user
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IUserService.ToggleUserStatusAsync(System.Guid,System.Boolean)">
            <summary>
            Toggle user active status
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IUserService.SendPasswordResetEmailAsync(System.Guid)">
            <summary>
            Send password reset email
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IUserService.SendUserConfirmationEmailAsync(System.Guid,System.String)">
            <summary>
            Send user confirmation email with login credentials
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IUserService.CanAccessUserAsync(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Check if current user can access specified user
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IUserService.CanAccessClinicAsync(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Check if current user can access specified clinic
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IUserService.PurchasePlanAsync(System.Guid,SingleClin.API.DTOs.Plan.PurchasePlanDto)">
            <summary>
            Purchase a plan for a user
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IUserService.GetUserPlansAsync(System.Guid)">
            <summary>
            Get user's active plans
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IUserService.GetUserPlanAsync(System.Guid,System.Guid)">
            <summary>
            Get user's active plan by ID
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.IUserService.CancelUserPlanAsync(System.Guid,System.Guid,System.String)">
            <summary>
            Cancel/Remove a user's plan
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.MockEmailProvider">
            <summary>
            Mock email provider for development/testing when SendGrid is not configured
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.PlanService">
            <summary>
            Service implementation for Plan business logic
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.PlanService.GetNextDisplayOrderAsync">
            <summary>
            Get the next available display order for a new plan
            </summary>
            <returns>Next display order value</returns>
        </member>
        <member name="M:SingleClin.API.Services.PlanService.GetUserPlanByIdAsync(System.Guid)">
            <summary>
            Get user plan by ID
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.QRCodeGeneratorService">
            <summary>
            Service for generating QR Code images from JWT tokens
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeGeneratorService.GenerateQRCode(System.String,System.Int32)">
            <summary>
            Generate QR Code as Data URL from JWT token
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeGeneratorService.GenerateQRCodeBytes(System.String,System.Int32)">
            <summary>
            Generate QR Code as byte array from JWT token
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeGeneratorService.CalculatePixelsPerModule(System.Int32)">
            <summary>
            Calculate pixels per module based on desired size
            QR Codes have different numbers of modules based on data length
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.QRCodeService">
            <summary>
            Orchestrator service for QR Code generation workflow
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeService.GenerateQRCodeAsync(System.Guid,System.String,System.Int32,System.Int32)">
            <summary>
            Generate complete QR Code for a user plan
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeService.ValidateUserPlanAsync(System.Guid)">
            <summary>
            Validate user plan before QR Code generation
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeService.GetMetricsAsync">
            <summary>
            Get QR Code generation metrics
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeService.RecordMetrics(System.Boolean)">
            <summary>
            Record QR Code generation metrics
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeService.CacheValidationResult(System.String,System.Boolean)">
            <summary>
            Cache plan validation result
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.QRCodeTokenService">
            <summary>
            Service for generating and validating QR Code JWT tokens
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeTokenService.GenerateTokenAsync(System.Guid,System.String,System.Int32)">
            <summary>
            Generate a JWT token for QR Code with unique nonce
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeTokenService.ValidateAndConsumeTokenAsync(System.String)">
            <summary>
            Validate and consume a QR Code token
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeTokenService.ParseTokenAsync(System.String)">
            <summary>
            Extract claims from token without consuming the nonce
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeTokenService.GetSecurityKey">
            <summary>
            Get the security key for JWT signing/validation
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.QRCodeValidationService">
            <summary>
            Service for validating QR Code tokens and processing transactions
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeValidationService.ValidateQRCodeAsync(SingleClin.API.DTOs.QRCode.QRCodeValidateRequestDto)">
            <summary>
            Validate QR Code token and process transaction
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeValidationService.ParseQRCodeTokenAsync(System.String)">
            <summary>
            Parse QR Code token without consuming nonce
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeValidationService.IsClinicAuthorizedAsync(System.Guid)">
            <summary>
            Check if clinic is authorized to validate QR codes
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeValidationService.GenerateTransactionCode">
            <summary>
            Generate unique transaction code
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.QRCodeValidationService.CreateErrorDetails(SingleClin.API.Exceptions.QRCodeValidationException)">
            <summary>
            Create error details dictionary from exception
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.RedisService">
            <summary>
            Redis service implementation for QR Code nonce management
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.RedisService.StoreNonceAsync(System.String,System.String,System.Int32)">
            <summary>
            Store a nonce with expiration for QR Code generation
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.RedisService.ConsumeNonceAsync(System.String)">
            <summary>
            Retrieve and consume (remove) a nonce from Redis
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.RedisService.NonceExistsAsync(System.String)">
            <summary>
            Check if a nonce exists without consuming it
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.RedisService.GenerateNonce">
            <summary>
            Generate a new unique nonce using cryptographically secure random bytes
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.RedisService.IsConnectedAsync">
            <summary>
            Check Redis connection health
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.RedisService.GetNonceKey(System.String)">
            <summary>
            Get the full Redis key for a nonce
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.RefreshTokenService">
            <summary>
            Service for managing refresh tokens
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.ReportQueryBuilder`1">
            <summary>
            Builder pattern for constructing complex report queries
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Add include for eager loading
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Add where clause
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.WhereIf(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Add conditional where clause
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.WithinDateRange``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.DateTime,System.DateTime)">
            <summary>
            Add date range filter
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Set order by
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.OrderByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Set order by descending
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.ThenBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Add then by
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.ThenByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Add then by descending
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.Paginate(System.Int32,System.Int32)">
            <summary>
            Set pagination
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.Take(System.Int32)">
            <summary>
            Take specific number of records
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.Skip(System.Int32)">
            <summary>
            Skip specific number of records
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.WithTracking">
            <summary>
            Enable tracking (disabled by default for reports)
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.Build">
            <summary>
            Build the query
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.ToListAsync(System.Threading.CancellationToken)">
            <summary>
            Execute query and return list
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.FirstOrDefaultAsync(System.Threading.CancellationToken)">
            <summary>
            Execute query and return first or default
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Execute query and return count
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.AnyAsync(System.Threading.CancellationToken)">
            <summary>
            Check if any records exist
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilder`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Project to different type
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.ReportQueryBuilderExtensions">
            <summary>
            Extension methods for creating report query builders
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilderExtensions.BuildReport``1(System.Linq.IQueryable{``0})">
            <summary>
            Create a report query builder for the queryable
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilderExtensions.WithinPeriod(SingleClin.API.Services.ReportQueryBuilder{SingleClin.API.Data.Models.Transaction},System.DateTime,System.DateTime)">
            <summary>
            Filter transactions by date range
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilderExtensions.ForClinics(SingleClin.API.Services.ReportQueryBuilder{SingleClin.API.Data.Models.Transaction},System.Collections.Generic.List{System.Guid})">
            <summary>
            Filter by clinic IDs
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilderExtensions.ForServiceTypes(SingleClin.API.Services.ReportQueryBuilder{SingleClin.API.Data.Models.Transaction},System.Collections.Generic.List{System.String})">
            <summary>
            Filter by service types
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.ReportQueryBuilderExtensions.IncludeRelated(SingleClin.API.Services.ReportQueryBuilder{SingleClin.API.Data.Models.Transaction})">
            <summary>
            Include related entities for transactions
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.ReportService">
            <summary>
            Service for generating various reports
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.SendGridProvider.SendLowBalanceNotificationAsync(System.String,System.String,SingleClin.API.DTOs.EmailTemplate.LowBalanceTemplateData,System.Threading.CancellationToken)">
            <summary>
            Sends a low balance notification email using templates
            </summary>
            <param name="recipientEmail">Recipient email address</param>
            <param name="recipientName">Recipient name</param>
            <param name="templateData">Template data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Notification response</returns>
        </member>
        <member name="M:SingleClin.API.Services.SendGridProvider.SendTemplatedEmailAsync(System.String,System.String,System.String,System.Object,SingleClin.API.DTOs.Notification.NotificationType,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Sends a templated email
            </summary>
            <param name="recipientEmail">Recipient email</param>
            <param name="recipientName">Recipient name</param>
            <param name="templateName">Template name</param>
            <param name="templateData">Template data</param>
            <param name="notificationType">Notification type</param>
            <param name="priority">Email priority</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Notification response</returns>
        </member>
        <member name="T:SingleClin.API.Services.TransactionService">
            <summary>
            Service for transaction business logic operations
            </summary>
        </member>
        <member name="T:SingleClin.API.Services.UserService">
            <summary>
            Service for managing users
            </summary>
        </member>
        <member name="M:SingleClin.API.Services.UserService.CancelUserPlanAsync(System.Guid,System.Guid,System.String)">
            <summary>
            Cancel/Remove a user's plan
            </summary>
        </member>
        <member name="T:SingleClin.API.Validators.ClinicRequestValidator">
            <summary>
            Validator for ClinicRequestDto using FluentValidation
            </summary>
        </member>
        <member name="M:SingleClin.API.Validators.ClinicRequestValidator.BeValidCnpjFormat(System.String)">
            <summary>
            Validates Brazilian CNPJ format
            </summary>
            <param name="cnpj">CNPJ to validate</param>
            <returns>True if format is valid, false otherwise</returns>
        </member>
        <member name="T:SingleClin.API.Validators.ClinicServiceDtoValidator">
            <summary>
            Validator for ClinicServiceDto with automatic CreditCost calculation
            </summary>
        </member>
        <member name="T:SingleClin.API.Validators.PlanRequestValidator">
            <summary>
            Validator for PlanRequestDto using FluentValidation
            </summary>
        </member>
        <member name="M:SingleClin.API.Validators.PlanRequestValidator.HaveMaxTwoDecimalPlaces(System.Decimal)">
            <summary>
            Validates that decimal value has maximum 2 decimal places
            </summary>
            <param name="value">Decimal value to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:SingleClin.API.Validators.PlanRequestValidator.HaveMaxTwoDecimalPlaces(System.Nullable{System.Decimal})">
            <summary>
            Validates that nullable decimal value has maximum 2 decimal places
            </summary>
            <param name="value">Nullable decimal value to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="T:SingleClin.API.Validators.TransactionCancelValidator">
            <summary>
            Validator for TransactionCancelDto using FluentValidation
            </summary>
        </member>
        <member name="M:SingleClin.API.Validators.TransactionCancelValidator.BeValidCancellationReason(System.String)">
            <summary>
            Validates that cancellation reason is meaningful
            </summary>
        </member>
        <member name="T:SingleClin.API.Validators.TransactionFilterValidator">
            <summary>
            Validator for TransactionFilterDto using FluentValidation
            </summary>
        </member>
        <member name="M:SingleClin.API.Validators.TransactionFilterValidator.BeValidSortField(System.String)">
            <summary>
            Validates if the sort field is allowed
            </summary>
        </member>
        <member name="M:SingleClin.API.Validators.TransactionFilterValidator.BeValidSortOrder(System.String)">
            <summary>
            Validates if the sort order is valid
            </summary>
        </member>
        <member name="T:SingleClin.API.Validators.TransactionUpdateValidator">
            <summary>
            Validator for TransactionUpdateDto using FluentValidation
            </summary>
        </member>
        <member name="M:SingleClin.API.Validators.TransactionUpdateValidator.BeValidDecimalPrecision(System.Nullable{System.Decimal})">
            <summary>
            Validates that decimal has maximum 2 decimal places
            </summary>
        </member>
    </members>
</doc>
