// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SingleClin.API.Data;

#nullable disable

namespace SingleClin.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SingleClin.API.Data.Models.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Cnpj")
                        .HasColumnType("text")
                        .HasColumnName("cnpj");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("ImageContentType")
                        .HasColumnType("text")
                        .HasColumnName("image_content_type");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("text")
                        .HasColumnName("image_file_name");

                    b.Property<long?>("ImageSize")
                        .HasColumnType("bigint")
                        .HasColumnName("image_size");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_clinics");

                    b.ToTable("clinics");
                });

            modelBuilder.Entity("SingleClin.API.Data.Models.ClinicImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AltText")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("alt_text");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uuid")
                        .HasColumnName("clinic_id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("display_order");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_name");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_featured");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("StorageFileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("storage_file_name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_clinic_images");

                    b.HasIndex("ClinicId")
                        .HasDatabaseName("IX_ClinicImages_ClinicId");

                    b.HasIndex("StorageFileName")
                        .IsUnique()
                        .HasDatabaseName("IX_ClinicImages_StorageFileName");

                    b.HasIndex("ClinicId", "DisplayOrder")
                        .HasDatabaseName("IX_ClinicImages_ClinicId_DisplayOrder");

                    b.HasIndex("ClinicId", "IsFeatured")
                        .HasDatabaseName("IX_ClinicImages_ClinicId_IsFeatured")
                        .HasFilter("is_featured = true");

                    b.ToTable("ClinicImages", (string)null);
                });

            modelBuilder.Entity("SingleClin.API.Data.Models.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Credits")
                        .HasColumnType("integer")
                        .HasColumnName("credits");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_featured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("original_price");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("ValidityDays")
                        .HasColumnType("integer")
                        .HasColumnName("validity_days");

                    b.HasKey("Id")
                        .HasName("pk_plans");

                    b.ToTable("plans");
                });

            modelBuilder.Entity("SingleClin.API.Data.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancellation_date");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_reason");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uuid")
                        .HasColumnName("clinic_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreditsUsed")
                        .HasColumnType("integer")
                        .HasColumnName("credits_used");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("QRNonce")
                        .HasColumnType("text")
                        .HasColumnName("qrnonce");

                    b.Property<string>("QRToken")
                        .HasColumnType("text")
                        .HasColumnName("qrtoken");

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("service_description");

                    b.Property<string>("ServiceType")
                        .HasColumnType("text")
                        .HasColumnName("service_type");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<Guid>("UserPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_plan_id");

                    b.Property<string>("ValidatedBy")
                        .HasColumnType("text")
                        .HasColumnName("validated_by");

                    b.Property<DateTime?>("ValidationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("validation_date");

                    b.Property<string>("ValidationNotes")
                        .HasColumnType("text")
                        .HasColumnName("validation_notes");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("ClinicId")
                        .HasDatabaseName("ix_transactions_clinic_id");

                    b.HasIndex("UserPlanId")
                        .HasDatabaseName("ix_transactions_user_plan_id");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("SingleClin.API.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirebaseUid")
                        .HasColumnType("text")
                        .HasColumnName("firebase_uid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users");
                });

            modelBuilder.Entity("SingleClin.API.Data.Models.UserPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_paid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Credits")
                        .HasColumnType("integer")
                        .HasColumnName("credits");

                    b.Property<int>("CreditsRemaining")
                        .HasColumnType("integer")
                        .HasColumnName("credits_remaining");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentTransactionId")
                        .HasColumnType("text")
                        .HasColumnName("payment_transaction_id");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("plan_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_plans");

                    b.HasIndex("PlanId")
                        .HasDatabaseName("ix_user_plans_plan_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_plans_user_id");

                    b.ToTable("user_plans");
                });

            modelBuilder.Entity("SingleClin.API.Data.Models.ClinicImage", b =>
                {
                    b.HasOne("SingleClin.API.Data.Models.Clinic", "Clinic")
                        .WithMany("Images")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clinic_images_clinics_clinic_id");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("SingleClin.API.Data.Models.Transaction", b =>
                {
                    b.HasOne("SingleClin.API.Data.Models.Clinic", "Clinic")
                        .WithMany("Transactions")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_clinics_clinic_id");

                    b.HasOne("SingleClin.API.Data.Models.UserPlan", "UserPlan")
                        .WithMany("Transactions")
                        .HasForeignKey("UserPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_user_plans_user_plan_id");

                    b.Navigation("Clinic");

                    b.Navigation("UserPlan");
                });

            modelBuilder.Entity("SingleClin.API.Data.Models.UserPlan", b =>
                {
                    b.HasOne("SingleClin.API.Data.Models.Plan", "Plan")
                        .WithMany("UserPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_plans_plans_plan_id");

                    b.HasOne("SingleClin.API.Data.Models.User", "User")
                        .WithMany("UserPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_plans_users_user_id");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SingleClin.API.Data.Models.Clinic", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SingleClin.API.Data.Models.Plan", b =>
                {
                    b.Navigation("UserPlans");
                });

            modelBuilder.Entity("SingleClin.API.Data.Models.User", b =>
                {
                    b.Navigation("UserPlans");
                });

            modelBuilder.Entity("SingleClin.API.Data.Models.UserPlan", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
